%../format/meta%

$notation: %MetaModel {
  definitionTypes = [$Template],
  expressionTypes = [$Bool, $Int, $String, $Expr],
  functions = [$true, $false, $not, $opt, $add, $for, $first, $last, $rev, $sel, $neg, %Any],
  lookup = 'templates.slate'
}

$Template: %DefinitionType($Expr) {
  members = #(
    notation?: $Expr,
    symbol?: $Expr,
    useSymbol?: $Bool = $true,
    elements?: $TemplateElements,
    context?: $TemplateContext
  )
}

$TemplateElements: %ExpressionType {
  members = #(
    operand?: $Expr,
    property?: $Expr,
    singular?: $Expr,
    plural?: $Expr,
    article?: $Expr,
    isFeature: $Bool = $false
  )
}

$TemplateContext: %ExpressionType {
  members = #(
    operator: $Bool = $false,
    predicate: $Bool = $false,
    definitionNotation: $Bool = $false,
    argument: $Bool = $false
  )
}

$Bool: %ExpressionType {}
$Int: %ExpressionType {}
$String: %ExpressionType {}
$Expr: %ExpressionType {}

$true: $Bool {}
$false: $Bool {}
$not(condition: $Bool): $Bool {}

$opt(param: %Any, valueIfPresent?: %Any, valueIfMissing?: %Any): %Any {}

$add(items...: $Int): $Int {}

$for(param: %Any, dimension: %Int, item: %Any, separator?: %Any): %Any {}
$first: $Bool {}
$last: $Bool {}

$rev(list: %Any): %Any {}

$sel(items...: %Any): %Any {}
$neg(items...: %Any): %Any {}
