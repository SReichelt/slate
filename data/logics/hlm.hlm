%../format/meta%

$hlm: %MetaModel {
  definitionTypes = [$Construction, $SetOperator, $ExplicitOperator, $ImplicitOperator, $MacroOperator, $Predicate, $StandardTheorem, $EquivalenceTheorem],
  expressionTypes = [$Expr, $Bool, $Nat,
                     $Set, $Subset, $Element, $Symbol, $Constraint, $Binding,
                     $SetDef, $Def,
                     $Consider, $State, $UseDef, $UseCases, $UseForAll, $UseExists, $Embed, $SetExtend, $Extend, $Substitute, $ResolveDef, $UseTheorem, $ProveDef, $ProveNeg, $ProveForAll, $ProveExists, $ProveSetEquals, $ProveCases, $ProveByInduction],
  functions = [$true, $false, $left, $right,
               $empty, $previous,
               $enumeration, $subset, $extendedSubset, $setStructuralCases,
               $cases, $structuralCases,
               $not, $and, $or, $forall, $exists, $existsUnique, $in, $sub, $setEquals, $equals, $structural],
  lookup = %Any
}

$Object: %DefinitionType {
  members = #(
    remarks?: %String,
    references: %String[] = []
  )
}

$Definition: %DefinitionType {
  superType = $Object,
  members = #(
    properties: $Property[] = [],
    display?: $../display/display/Expr[],
    definitionDisplay?: $DefinitionDisplay
  )
}

$DefinitionDisplay: %ExpressionType {
  members = #(
    parameter: %SingleParameter($Expr),
    display[parameter]?: $../display/display/Expr[],
    singularName?: $../display/display/Expr,
    pluralName?: $../display/display/Expr,
    nameOptional: $../display/display/Bool = $../display/display/false
  )
}

$Construction: %DefinitionType($SetTerm) {
  superType = $Definition,
  members = #(
    embedding?: $Embedding
  ),
  innerDefinitionTypes = [$Constructor]
}

$Embedding: %ExpressionType {
  members = #(
    parameter: %SingleParameter($Element),
    target[parameter]: $ElementTerm,
    wellDefinednessProof?: $Proof
  )
}

$Constructor: %DefinitionType($ElementTerm) {
  superType = $Definition,
  members = #(
    equalityDefinition[$Construction]?: $EqualityDefinition,
    rewrite?: $RewriteDefinition
  )
}

$EqualityDefinition: %ExpressionType {
  members = #(
    leftParameters: %ParameterList,
    rightParameters: %ParameterList,
    definition[leftParameters, rightParameters]: $Formula[],
    equivalenceProofs[leftParameters, rightParameters]?: $Proof[],
    reflexivityProof?: $Proof,
    symmetryProof?: $Proof,
    transitivityProof?: $Proof,
    isomorphic: $Bool = $false
  )
}

$RewriteDefinition: %ExpressionType {
  members = #(
    value: $ElementTerm,
    theorem?: $Theorem
  )
}

$SetOperator: %DefinitionType($SetTerm) {
  superType = $Definition,
  members = #(
    definition: $SetTerm[],
    equalityProofs: $Proof[] = [],
    setRestriction?: $SetTerm,
    setRestrictionProof?: $Proof
  )
}

$Operator: %DefinitionType($ElementTerm) {
  superType = $Definition
}

$ExplicitOperator: %DefinitionType($ElementTerm) {
  superType = $Operator,
  members = #(
    definition: $ElementTerm[],
    equalityProofs: $Proof[] = [],
    setRestriction?: $SetTerm,
    setRestrictionProof?: $Proof
  )
}

$ImplicitOperator: %DefinitionType($ElementTerm) {
  superType = $Operator,
  members = #(
    parameter: %SingleParameter($Element),
    definition[parameter]: $Formula[],
    equivalenceProofs[parameter]: $Proof[] = [],
    wellDefinednessProof?: $Proof
  )
}

$MacroOperator: %DefinitionType($ElementTerm) {
  superType = $Operator
}

$Predicate: %DefinitionType($Formula) {
  superType = $Definition,
  members = #(
    definition: $Formula[],
    equivalenceProofs: $Proof[] = []
  )
}

$Theorem: %DefinitionType {
  superType = $Object
}

$StandardTheorem: %DefinitionType {
  superType = $Theorem,
  members = #(
    claim: $Formula,
    proofs: $Proof[] = []
  )
}

$EquivalenceTheorem: %DefinitionType {
  superType = $Theorem,
  members = #(
    conditions: $Formula[],
    equivalenceProofs: $Proof[] = []
  )
}

$Property: %ExpressionType {
  members = #(
    property: %String,
    theorem?: $Theorem
  )
}

$Bool: %ExpressionType {}
$true: $Bool {}
$false: $Bool {}

$Nat: %ExpressionType {}

$Expr: %ExpressionType {}

$EquationSide: %ExpressionType {}
$left: $EquationSide {}
$right: $EquationSide {}

$Set(auto: $Bool = $false, embedSubsets: $Bool = $false): %ParameterType($SetTerm) {
  argumentType = $SetArg
}
$Subset(superset: $SetTerm, auto: $Bool = $false, embedSubsets: $Bool = $false): %ParameterType($SetTerm) {
  argumentType = $SubsetArg
}
$Element(set: $SetTerm, auto: $Bool = $false, shortcut?: $Shortcut): %ParameterType($ElementTerm) {
  argumentType = $ElementArg,
  exports = [shortcut]
}
$Symbol: %ParameterType($SymbolTerm) {
  argumentType = $SymbolArg
}
$Constraint(formula: $Formula): %ParameterType($Formula) {
  optional = %true,
  argumentType = $ConstraintArg
}
$Binding(set: $SetTerm, parameters[%self]: %ParameterList): %ParameterType {
  argumentType = $BindingArg,
  exports = [parameters]
}
$SetDef(set: $SetTerm): %ParameterType($SetTerm) {
  optional = %true
}
$Def(element: $ElementTerm): %ParameterType($ElementTerm) {
  optional = %true
}

$Shortcut: %ExpressionType {
  members = #(
    constructor: $Constructor,
    parameters: %ParameterList = #(),
    rewrite: $Bool = $false,
    override: $Bool = $false
  ),
  exports = [parameters]
}

$SetArg: %ExpressionType {
  members = #(
    set: $SetTerm
  )
}
$SubsetArg: %ExpressionType {
  members = #(
    set: $SetTerm,
    subsetProof?: $Proof
  )
}
$ElementArg: %ExpressionType {
  members = #(
    element: $ElementTerm,
    elementProof?: $Proof
  )
}
$SymbolArg: %ExpressionType {
  members = #(
    symbol: $SymbolTerm
  )
}
$ConstraintArg: %ExpressionType {
  members = #(
    proof?: $Proof
  )
}
$BindingArg: %ExpressionType {
  members = #(
    parameter: %SingleParameter($Element),
    arguments[parameter]: %ArgumentList
  )
}

$SetTerm: %ExpressionType {}
$ElementTerm: %ExpressionType {}
$SymbolTerm: %ExpressionType {}
$Formula: %ExpressionType {}

$empty: %Any {}
$previous: %Any {}

$enumeration(terms...?: $ElementTerm): $SetTerm {}
$subset(parameter: %SingleParameter($Element), formula[parameter]: $Formula): $SetTerm {}
$extendedSubset(parameters: %ParameterList, term[parameters]: $ElementTerm): $SetTerm {}
$setStructuralCases(term: $ElementTerm, construction: $Construction, cases: $StructuralCase($SetTerm)[]): $SetTerm {}

$cases(cases: $Case($ElementTerm)[]): $ElementTerm {}
$structuralCases(term: $ElementTerm, construction: $Construction, cases: $StructuralCase($ElementTerm)[]): $ElementTerm {}

$not(formula: $Formula): $Formula {}
$and(formulae...?: $Formula): $Formula {}
$or(formulae...?: $Formula): $Formula {}
$forall(parameters: %ParameterList, formula[parameters]: $Formula): $Formula {}
$exists(parameters: %ParameterList, formula[parameters]?: $Formula): $Formula {}
$existsUnique(parameters: %ParameterList, formula[parameters]?: $Formula): $Formula {}
$in(element: $ElementTerm, set: $SetTerm): $Formula {}
$sub(subset: $SetTerm, superset: $SetTerm): $Formula {}
$setEquals(left: $SetTerm, right: $SetTerm): $Formula {}
$equals(left: $ElementTerm, right: $ElementTerm): $Formula {}
$structural(term: $ElementTerm, construction: $Construction, cases: $StructuralCase($Formula)[]): $Formula {}

$Case(type: %Type): %ExpressionType {
  members = #(
    formula: $Formula,
    value: type,
    wellDefinednessProof?: $Proof
  )
}

$StructuralCase(type: %Type): %ExpressionType {
  members = #(
    constructor: $Constructor,
    parameters: %ParameterList = #(),
    value[parameters]: type,
    rewrite: $Bool = $false,
    wellDefinednessProof?: $Proof
  )
}

$Proof: %ExpressionType {
  members = #(
    from?: %Int,
    to?: %Int,
    parameters?: %ParameterList,
    goal[parameters]?: $Formula,
    steps[parameters]: %ParameterList
  )
}

$IntermediateProofStep: %ParameterType($Formula) {}
$FinalProofStep: %ParameterType {}

$Consider(variable: %Any, index?: %Int): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$State(statement: $Formula, proof?: $Proof): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$UseDef(side?: $EquationSide, result: $Formula): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$UseCases(side?: $EquationSide, caseProofs: $Proof[]): %ParameterType {
  superType = $FinalProofStep
}
$UseForAll(arguments: %ArgumentList): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$UseExists(proof: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$Embed(construction: $Construction, input: $ElementTerm, output: $ElementTerm): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$SetExtend(term: $SetTerm): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$Extend(term: $ElementTerm): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$Substitute(source: %SingleParameter($IntermediateProofStep), sourceSide: $EquationSide, result: $Formula): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$ResolveDef(result: $Formula): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$UseTheorem(theorem: $Theorem, result: $Formula): %ParameterType($Formula) {
  superType = $IntermediateProofStep
}
$ProveDef(side?: $EquationSide, proof: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$ProveNeg(proof: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$ProveForAll(proof: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$ProveExists(arguments: %ArgumentList, proof?: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$ProveSetEquals(subsetProof?: $Proof, supersetProof?: $Proof): %ParameterType {
  superType = $FinalProofStep
}
$ProveCases(side?: $EquationSide, caseProofs: $Proof[]): %ParameterType {
  superType = $FinalProofStep
}
$ProveByInduction(term: $ElementTerm, construction: $Construction, cases: $StructuralCase($Proof)[]): %ParameterType {
  superType = $FinalProofStep
}
