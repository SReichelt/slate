%../../../../logics/hlm%

/**
 * @remarks The definitions in this section are somewhat technical. Their purpose is to implement a generic notion of “isomorphism” that can be checked purely syntactically. If it can be determined that the equality definition of a constructor does not identify any non-isomorphic objects, definitions based on the decomposition of that constructor are automatically well-defined.
 *
 *          Each of the definitions transforms an object defined on *X* into the equivalent object defined on *Y*, according to the given bijection. The first definition is rather trivial. The other definitions are stated in such a way that the transformation can be identified as a mere relabeling of elements.
 */
$"element transform"(
  X: %Set(auto = %true),
  Y: %Set(auto = %true),
  φ: %Element($../../Essentials/Functions/Bijections(
    X = {X},
    Y = {Y}
  )),
  x: %Element(X)
): %ExplicitOperator {
  display = [$Function(
    function = φ,
    arguments = [x],
    style = '[]'
  )],
  definition = [$../../Essentials/Functions/value(
    X = {X},
    Y = {Y},
    f = {φ},
    x = {x}
  )]
}
