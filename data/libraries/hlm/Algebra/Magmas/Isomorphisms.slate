%../../../../logics/hlm%

$Isomorphisms(
  𝐌: %Element($Magmas),
  𝐍: %Element(%previous)
): %SetOperator {
  display = [$Function(
    function = 'Iso',
    arguments = [𝐌, 𝐍]
  )],
  definitionDisplay = {
    parameter = #(φ: %Expr),
    display = [$FunctionDefinition(
      function = φ,
      symbol = '↔',
      operands = [𝐌, 𝐍]
    )],
    singularName = 'isomorphism',
    pluralName = 'isomorphisms'
  },
  definition = [
    %subset(
      #(φ: %Element($Homomorphisms(
        𝐌 = {𝐌},
        𝐍 = {𝐍}
      ))),
      $../../Essentials/Functions/bijective(
        X = {$Elements(𝐌 = {𝐌})},
        Y = {$Elements(𝐌 = {𝐍})},
        f = {φ}
      )
    ),
    %subset(
      #(f: %Element($../../Essentials/Functions/Bijections(
        X = {$Elements(𝐌 = {𝐌})},
        Y = {$Elements(𝐌 = {𝐍})}
      ))),
      %forall(
        #(
          a: %Element($Elements(𝐌 = {𝐌})),
          b: %Element(%previous)
        ),
        %equals(
          $../../Essentials/Functions/value(
            X = {$Elements(𝐌 = {𝐌})},
            Y = {$Elements(𝐌 = {𝐍})},
            f = {f},
            x = {$operation(
              𝐌 = {𝐌},
              a = {a},
              b = {b}
            )}
          ),
          $operation(
            𝐌 = {𝐍},
            a = {$../../Essentials/Functions/value(
              X = {$Elements(𝐌 = {𝐌})},
              Y = {$Elements(𝐌 = {𝐍})},
              f = {f},
              x = {a}
            )},
            b = {$../../Essentials/Functions/value(
              X = {$Elements(𝐌 = {𝐌})},
              Y = {$Elements(𝐌 = {𝐍})},
              f = {f},
              x = {b}
            )}
          )
        )
      )
    )
  ]
}
