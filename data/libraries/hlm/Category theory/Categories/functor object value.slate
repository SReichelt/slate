%../../../../logics/hlm%

$"functor object value"(
  U: %Symbol(auto = %true),
  𝑪: %Element(
    $Categories(U = {U}),
    auto = %true,
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        O: %Set,
        𝐀: %Binding(
          O,
          #(𝐁: %Binding(
            %previous,
            #(M: %Set)
          ))
        ),
        𝐂: %Binding(
          O,
          #(i: %Element(M[𝐂,𝐂]))
        ),
        𝐃: %Binding(
          O,
          #(𝐄: %Binding(
            %previous,
            #(𝐅: %Binding(
              %previous,
              #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                X = {M[𝐄,𝐅]},
                Y = {M[𝐃,𝐄]},
                Z = {M[𝐃,𝐅]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(
            𝐖: %Element(O),
            𝐗: %Element(%previous),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(M[𝐖,𝐗]),
            g: %Element(M[𝐗,𝐘]),
            h: %Element(M[𝐘,𝐙])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐗,𝐙]},
              Y = {M[𝐖,𝐗]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐗,𝐙]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐙]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐙]},
                ∗ = {∘[𝐗,𝐘,𝐙]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐘,𝐙]},
              Y = {M[𝐖,𝐘]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐘,𝐙]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐖,𝐗]},
                Z = {M[𝐖,𝐘]},
                ∗ = {∘[𝐖,𝐗,𝐘]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐘]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐘,𝐘]},
                x = {i[𝐘]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐗,𝐗]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐗,𝐘]},
                x = {f},
                y = {i[𝐗]}
              ),
              f
            )
          )
        )),
        _3: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘]),
            g: %Element(M[𝐘,𝐗]),
            _4: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐘,𝐗]},
                Z = {M[𝐘,𝐘]},
                ∗ = {∘[𝐘,𝐗,𝐘]},
                x = {f},
                y = {g}
              ),
              i[𝐘]
            )),
            _5: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐗]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐗]},
                ∗ = {∘[𝐗,𝐘,𝐗]},
                x = {g},
                y = {f}
              ),
              i[𝐗]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  ),
  𝑫: %Element(
    %previous,
    auto = %true,
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        P: %Set,
        "𝐀'": %Binding(
          P,
          #("𝐁'": %Binding(
            %previous,
            #(N: %Set)
          ))
        ),
        "𝐂'": %Binding(
          P,
          #(j: %Element(N["𝐂'","𝐂'"]))
        ),
        "𝐃'": %Binding(
          P,
          #("𝐄'": %Binding(
            %previous,
            #("𝐅'": %Binding(
              %previous,
              #(∙: %Element($../../Essentials/Functions/Operations/Operations(
                X = {N["𝐄'","𝐅'"]},
                Y = {N["𝐃'","𝐄'"]},
                Z = {N["𝐃'","𝐅'"]}
              )))
            ))
          ))
        ),
        "_1'": %Constraint(%forall(
          #(
            "𝐖'": %Element(P),
            "𝐗'": %Element(%previous),
            "𝐘'": %Element(%previous),
            "𝐙'": %Element(%previous),
            f: %Element(N["𝐖'","𝐗'"]),
            g: %Element(N["𝐗'","𝐘'"]),
            h: %Element(N["𝐘'","𝐙'"])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {N["𝐗'","𝐙'"]},
              Y = {N["𝐖'","𝐗'"]},
              Z = {N["𝐖'","𝐙'"]},
              ∗ = {∙["𝐖'","𝐗'","𝐙'"]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐙'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐙'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐙'"]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {N["𝐘'","𝐙'"]},
              Y = {N["𝐖'","𝐘'"]},
              Z = {N["𝐖'","𝐙'"]},
              ∗ = {∙["𝐖'","𝐘'","𝐙'"]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐖'","𝐗'"]},
                Z = {N["𝐖'","𝐘'"]},
                ∗ = {∙["𝐖'","𝐗'","𝐘'"]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        "_2'": %Constraint(%forall(
          #(
            "𝐗'": %Element(P),
            "𝐘'": %Element(%previous),
            f: %Element(N["𝐗'","𝐘'"])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐘'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐘'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐘'"]},
                x = {j["𝐘'"]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐗'","𝐗'"]},
                Z = {N["𝐗'","𝐘'"]},
                ∗ = {∙["𝐗'","𝐗'","𝐘'"]},
                x = {f},
                y = {j["𝐗'"]}
              ),
              f
            )
          )
        )),
        "_3'": %Constraint(%forall(
          #(
            "𝐗'": %Element(P),
            "𝐘'": %Element(%previous),
            f: %Element(N["𝐗'","𝐘'"]),
            g: %Element(N["𝐘'","𝐗'"]),
            "_4'": %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐘'","𝐗'"]},
                Z = {N["𝐘'","𝐘'"]},
                ∗ = {∙["𝐘'","𝐗'","𝐘'"]},
                x = {f},
                y = {g}
              ),
              j["𝐘'"]
            )),
            "_5'": %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐗'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐗'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐗'"]},
                x = {g},
                y = {f}
              ),
              j["𝐗'"]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  ),
  F: %Element(
    $Functors(
      U = {U},
      𝑪 = {𝑪},
      𝑫 = {𝑫}
    ),
    shortcut = {
      constructor = $Functors(
          U = {U},
          𝑪 = {𝑪},
          𝑫 = {𝑫}
        ).functor,
      parameters = #(
        𝐀: %Binding(
          O,
          #(𝐏: %Element(P))
        ),
        𝐁: %Binding(
          O,
          #(𝐂: %Binding(
            O,
            #(f: %Binding(
              M[𝐁,𝐂],
              #(n: %Element(N[𝐏[𝐁],𝐏[𝐂]]))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐀: %Element(O)),
          %equals(n[𝐀,𝐀,i[𝐀]], j[𝐏[𝐀]])
        )),
        _2: %Constraint(%forall(
          #(
            𝐀: %Element(O),
            𝐁: %Element(%previous),
            𝐂: %Element(%previous),
            f: %Element(M[𝐀,𝐁]),
            g: %Element(M[𝐁,𝐂])
          ),
          %equals(
            n[
              𝐀,
              𝐂,
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐁,𝐂]},
                Y = {M[𝐀,𝐁]},
                Z = {M[𝐀,𝐂]},
                ∗ = {∘[𝐀,𝐁,𝐂]},
                x = {g},
                y = {f}
              )
            ],
            $../../Essentials/Functions/Operations/value(
              X = {N[𝐏[𝐁],𝐏[𝐂]]},
              Y = {N[𝐏[𝐀],𝐏[𝐁]]},
              Z = {N[𝐏[𝐀],𝐏[𝐂]]},
              ∗ = {∙[𝐏[𝐀],𝐏[𝐁],𝐏[𝐂]]},
              x = {n[𝐁,𝐂,g]},
              y = {n[𝐀,𝐁,f]}
            )
          )
        ))
      )
    }
  ),
  𝐗: %Element(O)
): %ExplicitOperator {
  display = [$Function(
    function = F,
    arguments = [𝐗]
  )],
  definition = [𝐏[𝐗]]
}
