%../../../../logics/hlm%

$"functor composition"(
  U: %Symbol(auto = %true),
  𝑪: %Element(
    $Categories(U = {U}),
    auto = %true
  ),
  𝑫: %Element(
    %previous,
    auto = %true
  ),
  𝑬: %Element(
    %previous,
    auto = %true
  ),
  F: %Element($Functors(
    U = {U},
    𝑪 = {𝑪},
    𝑫 = {𝑫}
  )),
  G: %Element($Functors(
    U = {U},
    𝑪 = {𝑫},
    𝑫 = {𝑬}
  ))
): %ExplicitOperator {
  display = [$Operator(
    symbol = '∘',
    operands = [G, F],
    minParenLevel = 2,
    maxParenLevel = 2
  )],
  definition = [$Functors(
      U = {U},
      𝑪 = {𝑪},
      𝑫 = {𝑬}
    ).functor(
      𝐗 = {
        #(𝐗: %Element(%setStructuralCases(
          𝑪,
          $Categories(U = {U}),
          [{
            constructor = $Categories(U = {U}).category,
            parameters = #(
              O: %Set,
              𝐀: %Binding(
                O,
                #(𝐁: %Binding(
                  %previous,
                  #(M: %Set)
                ))
              ),
              𝐂: %Binding(
                O,
                #(i: %Element(M[𝐂,𝐂]))
              ),
              𝐃: %Binding(
                O,
                #(𝐄: %Binding(
                  %previous,
                  #(𝐅: %Binding(
                    %previous,
                    #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                      X = {M[𝐄,𝐅]},
                      Y = {M[𝐃,𝐄]},
                      Z = {M[𝐃,𝐅]}
                    )))
                  ))
                ))
              ),
              _1: %Constraint(%forall(
                #(
                  𝐖: %Element(O),
                  𝐗: %Element(%previous),
                  𝐘: %Element(%previous),
                  𝐙: %Element(%previous),
                  f: %Element(M[𝐖,𝐗]),
                  g: %Element(M[𝐗,𝐘]),
                  h: %Element(M[𝐘,𝐙])
                ),
                %equals(
                  $../../Essentials/Functions/Operations/value(
                    X = {M[𝐗,𝐙]},
                    Y = {M[𝐖,𝐗]},
                    Z = {M[𝐖,𝐙]},
                    ∗ = {∘[𝐖,𝐗,𝐙]},
                    x = {$../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐙]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐙]},
                      ∗ = {∘[𝐗,𝐘,𝐙]},
                      x = {h},
                      y = {g}
                    )},
                    y = {f}
                  ),
                  $../../Essentials/Functions/Operations/value(
                    X = {M[𝐘,𝐙]},
                    Y = {M[𝐖,𝐘]},
                    Z = {M[𝐖,𝐙]},
                    ∗ = {∘[𝐖,𝐘,𝐙]},
                    x = {h},
                    y = {$../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐖,𝐗]},
                      Z = {M[𝐖,𝐘]},
                      ∗ = {∘[𝐖,𝐗,𝐘]},
                      x = {g},
                      y = {f}
                    )}
                  )
                )
              )),
              _2: %Constraint(%forall(
                #(
                  𝐗: %Element(O),
                  𝐘: %Element(%previous),
                  f: %Element(M[𝐗,𝐘])
                ),
                %and(
                  %equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐘]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐘]},
                      ∗ = {∘[𝐗,𝐘,𝐘]},
                      x = {i[𝐘]},
                      y = {f}
                    ),
                    f
                  ),
                  %equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐗,𝐗]},
                      Z = {M[𝐗,𝐘]},
                      ∗ = {∘[𝐗,𝐗,𝐘]},
                      x = {f},
                      y = {i[𝐗]}
                    ),
                    f
                  )
                )
              )),
              _3: %Constraint(%forall(
                #(
                  𝐗: %Element(O),
                  𝐘: %Element(%previous),
                  f: %Element(M[𝐗,𝐘]),
                  g: %Element(M[𝐘,𝐗]),
                  _4: %Constraint(%equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐘,𝐗]},
                      Z = {M[𝐘,𝐘]},
                      ∗ = {∘[𝐘,𝐗,𝐘]},
                      x = {f},
                      y = {g}
                    ),
                    i[𝐘]
                  )),
                  _5: %Constraint(%equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐗]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐗]},
                      ∗ = {∘[𝐗,𝐘,𝐗]},
                      x = {g},
                      y = {f}
                    ),
                    i[𝐗]
                  ))
                ),
                %equals(f, g)
              ))
            ),
            value = O
          }]
        ))),
        {𝐏 = {$"functor object value"(
          U = {U},
          𝑪 = {𝑫},
          𝑫 = {𝑬},
          F = {G},
          𝐗 = {$"functor object value"(
            U = {U},
            𝑪 = {𝑪},
            𝑫 = {𝑫},
            F = {F},
            𝐗 = {𝐗}
          )}
        )}}
      },
      𝐘 = {
        #(𝐘: %Element(%setStructuralCases(
          𝑪,
          $Categories(U = {U}),
          [{
            constructor = $Categories(U = {U}).category,
            parameters = #(
              O: %Set,
              𝐀: %Binding(
                O,
                #(𝐁: %Binding(
                  %previous,
                  #(M: %Set)
                ))
              ),
              𝐂: %Binding(
                O,
                #(i: %Element(M[𝐂,𝐂]))
              ),
              𝐃: %Binding(
                O,
                #(𝐄: %Binding(
                  %previous,
                  #(𝐅: %Binding(
                    %previous,
                    #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                      X = {M[𝐄,𝐅]},
                      Y = {M[𝐃,𝐄]},
                      Z = {M[𝐃,𝐅]}
                    )))
                  ))
                ))
              ),
              _1: %Constraint(%forall(
                #(
                  𝐖: %Element(O),
                  𝐗: %Element(%previous),
                  𝐘: %Element(%previous),
                  𝐙: %Element(%previous),
                  f: %Element(M[𝐖,𝐗]),
                  g: %Element(M[𝐗,𝐘]),
                  h: %Element(M[𝐘,𝐙])
                ),
                %equals(
                  $../../Essentials/Functions/Operations/value(
                    X = {M[𝐗,𝐙]},
                    Y = {M[𝐖,𝐗]},
                    Z = {M[𝐖,𝐙]},
                    ∗ = {∘[𝐖,𝐗,𝐙]},
                    x = {$../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐙]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐙]},
                      ∗ = {∘[𝐗,𝐘,𝐙]},
                      x = {h},
                      y = {g}
                    )},
                    y = {f}
                  ),
                  $../../Essentials/Functions/Operations/value(
                    X = {M[𝐘,𝐙]},
                    Y = {M[𝐖,𝐘]},
                    Z = {M[𝐖,𝐙]},
                    ∗ = {∘[𝐖,𝐘,𝐙]},
                    x = {h},
                    y = {$../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐖,𝐗]},
                      Z = {M[𝐖,𝐘]},
                      ∗ = {∘[𝐖,𝐗,𝐘]},
                      x = {g},
                      y = {f}
                    )}
                  )
                )
              )),
              _2: %Constraint(%forall(
                #(
                  𝐗: %Element(O),
                  𝐘: %Element(%previous),
                  f: %Element(M[𝐗,𝐘])
                ),
                %and(
                  %equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐘]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐘]},
                      ∗ = {∘[𝐗,𝐘,𝐘]},
                      x = {i[𝐘]},
                      y = {f}
                    ),
                    f
                  ),
                  %equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐗,𝐗]},
                      Z = {M[𝐗,𝐘]},
                      ∗ = {∘[𝐗,𝐗,𝐘]},
                      x = {f},
                      y = {i[𝐗]}
                    ),
                    f
                  )
                )
              )),
              _3: %Constraint(%forall(
                #(
                  𝐗: %Element(O),
                  𝐘: %Element(%previous),
                  f: %Element(M[𝐗,𝐘]),
                  g: %Element(M[𝐘,𝐗]),
                  _4: %Constraint(%equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐘]},
                      Y = {M[𝐘,𝐗]},
                      Z = {M[𝐘,𝐘]},
                      ∗ = {∘[𝐘,𝐗,𝐘]},
                      x = {f},
                      y = {g}
                    ),
                    i[𝐘]
                  )),
                  _5: %Constraint(%equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐗]},
                      Y = {M[𝐗,𝐘]},
                      Z = {M[𝐗,𝐗]},
                      ∗ = {∘[𝐗,𝐘,𝐗]},
                      x = {g},
                      y = {f}
                    ),
                    i[𝐗]
                  ))
                ),
                %equals(f, g)
              ))
            ),
            value = O
          }]
        ))),
        {𝐙 = {
          #(𝐙: %Element(%setStructuralCases(
            𝑪,
            $Categories(U = {U}),
            [{
              constructor = $Categories(U = {U}).category,
              parameters = #(
                O: %Set,
                𝐀: %Binding(
                  O,
                  #(𝐁: %Binding(
                    %previous,
                    #(M: %Set)
                  ))
                ),
                𝐂: %Binding(
                  O,
                  #(i: %Element(M[𝐂,𝐂]))
                ),
                𝐃: %Binding(
                  O,
                  #(𝐄: %Binding(
                    %previous,
                    #(𝐅: %Binding(
                      %previous,
                      #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                        X = {M[𝐄,𝐅]},
                        Y = {M[𝐃,𝐄]},
                        Z = {M[𝐃,𝐅]}
                      )))
                    ))
                  ))
                ),
                _1: %Constraint(%forall(
                  #(
                    𝐖: %Element(O),
                    𝐗: %Element(%previous),
                    𝐘: %Element(%previous),
                    𝐙: %Element(%previous),
                    f: %Element(M[𝐖,𝐗]),
                    g: %Element(M[𝐗,𝐘]),
                    h: %Element(M[𝐘,𝐙])
                  ),
                  %equals(
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐗,𝐙]},
                      Y = {M[𝐖,𝐗]},
                      Z = {M[𝐖,𝐙]},
                      ∗ = {∘[𝐖,𝐗,𝐙]},
                      x = {$../../Essentials/Functions/Operations/value(
                        X = {M[𝐘,𝐙]},
                        Y = {M[𝐗,𝐘]},
                        Z = {M[𝐗,𝐙]},
                        ∗ = {∘[𝐗,𝐘,𝐙]},
                        x = {h},
                        y = {g}
                      )},
                      y = {f}
                    ),
                    $../../Essentials/Functions/Operations/value(
                      X = {M[𝐘,𝐙]},
                      Y = {M[𝐖,𝐘]},
                      Z = {M[𝐖,𝐙]},
                      ∗ = {∘[𝐖,𝐘,𝐙]},
                      x = {h},
                      y = {$../../Essentials/Functions/Operations/value(
                        X = {M[𝐗,𝐘]},
                        Y = {M[𝐖,𝐗]},
                        Z = {M[𝐖,𝐘]},
                        ∗ = {∘[𝐖,𝐗,𝐘]},
                        x = {g},
                        y = {f}
                      )}
                    )
                  )
                )),
                _2: %Constraint(%forall(
                  #(
                    𝐗: %Element(O),
                    𝐘: %Element(%previous),
                    f: %Element(M[𝐗,𝐘])
                  ),
                  %and(
                    %equals(
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐘,𝐘]},
                        Y = {M[𝐗,𝐘]},
                        Z = {M[𝐗,𝐘]},
                        ∗ = {∘[𝐗,𝐘,𝐘]},
                        x = {i[𝐘]},
                        y = {f}
                      ),
                      f
                    ),
                    %equals(
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐗,𝐘]},
                        Y = {M[𝐗,𝐗]},
                        Z = {M[𝐗,𝐘]},
                        ∗ = {∘[𝐗,𝐗,𝐘]},
                        x = {f},
                        y = {i[𝐗]}
                      ),
                      f
                    )
                  )
                )),
                _3: %Constraint(%forall(
                  #(
                    𝐗: %Element(O),
                    𝐘: %Element(%previous),
                    f: %Element(M[𝐗,𝐘]),
                    g: %Element(M[𝐘,𝐗]),
                    _4: %Constraint(%equals(
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐗,𝐘]},
                        Y = {M[𝐘,𝐗]},
                        Z = {M[𝐘,𝐘]},
                        ∗ = {∘[𝐘,𝐗,𝐘]},
                        x = {f},
                        y = {g}
                      ),
                      i[𝐘]
                    )),
                    _5: %Constraint(%equals(
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐘,𝐗]},
                        Y = {M[𝐗,𝐘]},
                        Z = {M[𝐗,𝐗]},
                        ∗ = {∘[𝐗,𝐘,𝐗]},
                        x = {g},
                        y = {f}
                      ),
                      i[𝐗]
                    ))
                  ),
                  %equals(f, g)
                ))
              ),
              value = O
            }]
          ))),
          {f = {
            #(f: %Element(%setStructuralCases(
              𝑪,
              $Categories(U = {U}),
              [{
                constructor = $Categories(U = {U}).category,
                parameters = #(
                  O: %Set,
                  𝐀: %Binding(
                    O,
                    #(𝐁: %Binding(
                      %previous,
                      #(M: %Set)
                    ))
                  ),
                  𝐂: %Binding(
                    O,
                    #(i: %Element(M[𝐂,𝐂]))
                  ),
                  𝐃: %Binding(
                    O,
                    #(𝐄: %Binding(
                      %previous,
                      #(𝐅: %Binding(
                        %previous,
                        #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                          X = {M[𝐄,𝐅]},
                          Y = {M[𝐃,𝐄]},
                          Z = {M[𝐃,𝐅]}
                        )))
                      ))
                    ))
                  ),
                  _1: %Constraint(%forall(
                    #(
                      𝐖: %Element(O),
                      𝐗: %Element(%previous),
                      𝐘: %Element(%previous),
                      𝐙: %Element(%previous),
                      f: %Element(M[𝐖,𝐗]),
                      g: %Element(M[𝐗,𝐘]),
                      h: %Element(M[𝐘,𝐙])
                    ),
                    %equals(
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐗,𝐙]},
                        Y = {M[𝐖,𝐗]},
                        Z = {M[𝐖,𝐙]},
                        ∗ = {∘[𝐖,𝐗,𝐙]},
                        x = {$../../Essentials/Functions/Operations/value(
                          X = {M[𝐘,𝐙]},
                          Y = {M[𝐗,𝐘]},
                          Z = {M[𝐗,𝐙]},
                          ∗ = {∘[𝐗,𝐘,𝐙]},
                          x = {h},
                          y = {g}
                        )},
                        y = {f}
                      ),
                      $../../Essentials/Functions/Operations/value(
                        X = {M[𝐘,𝐙]},
                        Y = {M[𝐖,𝐘]},
                        Z = {M[𝐖,𝐙]},
                        ∗ = {∘[𝐖,𝐘,𝐙]},
                        x = {h},
                        y = {$../../Essentials/Functions/Operations/value(
                          X = {M[𝐗,𝐘]},
                          Y = {M[𝐖,𝐗]},
                          Z = {M[𝐖,𝐘]},
                          ∗ = {∘[𝐖,𝐗,𝐘]},
                          x = {g},
                          y = {f}
                        )}
                      )
                    )
                  )),
                  _2: %Constraint(%forall(
                    #(
                      𝐗: %Element(O),
                      𝐘: %Element(%previous),
                      f: %Element(M[𝐗,𝐘])
                    ),
                    %and(
                      %equals(
                        $../../Essentials/Functions/Operations/value(
                          X = {M[𝐘,𝐘]},
                          Y = {M[𝐗,𝐘]},
                          Z = {M[𝐗,𝐘]},
                          ∗ = {∘[𝐗,𝐘,𝐘]},
                          x = {i[𝐘]},
                          y = {f}
                        ),
                        f
                      ),
                      %equals(
                        $../../Essentials/Functions/Operations/value(
                          X = {M[𝐗,𝐘]},
                          Y = {M[𝐗,𝐗]},
                          Z = {M[𝐗,𝐘]},
                          ∗ = {∘[𝐗,𝐗,𝐘]},
                          x = {f},
                          y = {i[𝐗]}
                        ),
                        f
                      )
                    )
                  )),
                  _3: %Constraint(%forall(
                    #(
                      𝐗: %Element(O),
                      𝐘: %Element(%previous),
                      f: %Element(M[𝐗,𝐘]),
                      g: %Element(M[𝐘,𝐗]),
                      _4: %Constraint(%equals(
                        $../../Essentials/Functions/Operations/value(
                          X = {M[𝐗,𝐘]},
                          Y = {M[𝐘,𝐗]},
                          Z = {M[𝐘,𝐘]},
                          ∗ = {∘[𝐘,𝐗,𝐘]},
                          x = {f},
                          y = {g}
                        ),
                        i[𝐘]
                      )),
                      _5: %Constraint(%equals(
                        $../../Essentials/Functions/Operations/value(
                          X = {M[𝐘,𝐗]},
                          Y = {M[𝐗,𝐘]},
                          Z = {M[𝐗,𝐗]},
                          ∗ = {∘[𝐗,𝐘,𝐗]},
                          x = {g},
                          y = {f}
                        ),
                        i[𝐗]
                      ))
                    ),
                    %equals(f, g)
                  ))
                ),
                value = M[𝐘,𝐙]
              }]
            ))),
            {n = {$"functor morphism value"(
              U = {U},
              𝑪 = {𝑫},
              𝑫 = {𝑬},
              F = {G},
              𝐘 = {$"functor object value"(
                U = {U},
                𝑪 = {𝑪},
                𝑫 = {𝑫},
                F = {F},
                𝐗 = {𝐘}
              )},
              𝐙 = {$"functor object value"(
                U = {U},
                𝑪 = {𝑪},
                𝑫 = {𝑫},
                F = {F},
                𝐗 = {𝐙}
              )},
              f = {$"functor morphism value"(
                U = {U},
                𝑪 = {𝑪},
                𝑫 = {𝑫},
                F = {F},
                𝐘 = {𝐘},
                𝐙 = {𝐙},
                f = {f}
              )}
            )}}
          }}
        }}
      }
  )]
}
