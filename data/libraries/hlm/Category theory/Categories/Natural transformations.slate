%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Natural_transformation
 */
$"Natural transformations"(
  U: %Symbol(auto = %true),
  𝓒: %Element(
    $Categories(U = {U}),
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        O: %Set,
        𝐀: %Binding(
          O,
          #(𝐁: %Binding(
            %previous,
            #(M: %Set)
          ))
        ),
        𝐂: %Binding(
          O,
          #(i: %Element(M[𝐂,𝐂]))
        ),
        𝐃: %Binding(
          O,
          #(𝐄: %Binding(
            %previous,
            #(𝐅: %Binding(
              %previous,
              #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                X = {M[𝐄,𝐅]},
                Y = {M[𝐃,𝐄]},
                Z = {M[𝐃,𝐅]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(
            𝐖: %Element(O),
            𝐗: %Element(%previous),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(M[𝐖,𝐗]),
            g: %Element(M[𝐗,𝐘]),
            h: %Element(M[𝐘,𝐙])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐗,𝐙]},
              Y = {M[𝐖,𝐗]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐗,𝐙]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐙]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐙]},
                ∗ = {∘[𝐗,𝐘,𝐙]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐘,𝐙]},
              Y = {M[𝐖,𝐘]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐘,𝐙]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐖,𝐗]},
                Z = {M[𝐖,𝐘]},
                ∗ = {∘[𝐖,𝐗,𝐘]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐘]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐘,𝐘]},
                x = {i[𝐘]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐗,𝐗]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐗,𝐘]},
                x = {f},
                y = {i[𝐗]}
              ),
              f
            )
          )
        )),
        _3: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘]),
            g: %Element(M[𝐘,𝐗]),
            _4: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐘,𝐗]},
                Z = {M[𝐘,𝐘]},
                ∗ = {∘[𝐘,𝐗,𝐘]},
                x = {f},
                y = {g}
              ),
              i[𝐘]
            )),
            _5: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐗]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐗]},
                ∗ = {∘[𝐗,𝐘,𝐗]},
                x = {g},
                y = {f}
              ),
              i[𝐗]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  ),
  𝓓: %Element(
    %previous,
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        P: %Set,
        𝐀: %Binding(
          P,
          #(𝐁: %Binding(
            %previous,
            #(N: %Set)
          ))
        ),
        𝐂: %Binding(
          P,
          #(j: %Element(N[𝐂,𝐂]))
        ),
        𝐃: %Binding(
          P,
          #(𝐄: %Binding(
            %previous,
            #(𝐅: %Binding(
              %previous,
              #(∙: %Element($../../Essentials/Functions/Operations/Operations(
                X = {N[𝐄,𝐅]},
                Y = {N[𝐃,𝐄]},
                Z = {N[𝐃,𝐅]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(
            𝐖: %Element(P),
            𝐗: %Element(%previous),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(N[𝐖,𝐗]),
            g: %Element(N[𝐗,𝐘]),
            h: %Element(N[𝐘,𝐙])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {N[𝐗,𝐙]},
              Y = {N[𝐖,𝐗]},
              Z = {N[𝐖,𝐙]},
              ∗ = {∙[𝐖,𝐗,𝐙]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {N[𝐘,𝐙]},
                Y = {N[𝐗,𝐘]},
                Z = {N[𝐗,𝐙]},
                ∗ = {∙[𝐗,𝐘,𝐙]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {N[𝐘,𝐙]},
              Y = {N[𝐖,𝐘]},
              Z = {N[𝐖,𝐙]},
              ∗ = {∙[𝐖,𝐘,𝐙]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {N[𝐗,𝐘]},
                Y = {N[𝐖,𝐗]},
                Z = {N[𝐖,𝐘]},
                ∗ = {∙[𝐖,𝐗,𝐘]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(P),
            𝐘: %Element(%previous),
            f: %Element(N[𝐗,𝐘])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N[𝐘,𝐘]},
                Y = {N[𝐗,𝐘]},
                Z = {N[𝐗,𝐘]},
                ∗ = {∙[𝐗,𝐘,𝐘]},
                x = {j[𝐘]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N[𝐗,𝐘]},
                Y = {N[𝐗,𝐗]},
                Z = {N[𝐗,𝐘]},
                ∗ = {∙[𝐗,𝐗,𝐘]},
                x = {f},
                y = {j[𝐗]}
              ),
              f
            )
          )
        )),
        _3: %Constraint(%forall(
          #(
            𝐗: %Element(P),
            𝐘: %Element(%previous),
            f: %Element(N[𝐗,𝐘]),
            g: %Element(N[𝐘,𝐗]),
            _4: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N[𝐗,𝐘]},
                Y = {N[𝐘,𝐗]},
                Z = {N[𝐘,𝐘]},
                ∗ = {∙[𝐘,𝐗,𝐘]},
                x = {f},
                y = {g}
              ),
              j[𝐘]
            )),
            _5: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N[𝐘,𝐗]},
                Y = {N[𝐗,𝐘]},
                Z = {N[𝐗,𝐗]},
                ∗ = {∙[𝐗,𝐘,𝐗]},
                x = {g},
                y = {f}
              ),
              j[𝐗]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  ),
  F: %Element($Functors(
    U = {U},
    𝓒 = {𝓒},
    𝓓 = {𝓓}
  )),
  G: %Element(%previous)
): %SetOperator {
  display = [$FunctionOperator(
    symbol = '⇒',
    operands = [F, G],
    minParenLevel = -1
  )],
  definitionDisplay = {
    parameter = #(η: %Expr),
    display = [$FunctionDefinition(
      function = η,
      symbol = '⇒',
      operands = [F, G]
    )],
    singularName = 'natural transformation',
    pluralName = 'natural transformations',
    nameOptional = %true
  },
  definition = [%subset(
    #(n: %Element(
      $"Infranatural transformations"(
        U = {U},
        𝓒 = {𝓒},
        𝓓 = {𝓓},
        F = {F},
        G = {G}
      ),
      shortcut = {
        constructor = $"Infranatural transformations"(
            U = {U},
            𝓒 = {𝓒},
            𝓓 = {𝓓},
            F = {F},
            G = {G}
          ).transformation,
        parameters = #(𝐗: %Binding(
          O,
          #(η: %Element(N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐗}
            )
          ]))
        )),
        override = %true
      }
    )),
    %forall(
      #(
        𝐗: %Element(O),
        𝐘: %Element(%previous),
        f: %Element(M[𝐗,𝐘])
      ),
      %equals(
        $../../Essentials/Functions/Operations/value(
          X = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐘}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          Y = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐘}
            )
          ]},
          Z = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          ∗ = {∙[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐘}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          x = {η[𝐘]},
          y = {$"functor morphism value"(
            U = {U},
            𝓒 = {𝓒},
            𝓓 = {𝓓},
            F = {F},
            𝐘 = {𝐗},
            𝐙 = {𝐘},
            f = {f}
          )}
        ),
        $../../Essentials/Functions/Operations/value(
          X = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          Y = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐗}
            )
          ]},
          Z = {N[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          ∗ = {∙[
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {F},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐗}
            ),
            $"functor object value"(
              U = {U},
              𝓒 = {𝓒},
              𝓓 = {𝓓},
              F = {G},
              𝐗 = {𝐘}
            )
          ]},
          x = {$"functor morphism value"(
            U = {U},
            𝓒 = {𝓒},
            𝓓 = {𝓓},
            F = {G},
            𝐘 = {𝐗},
            𝐙 = {𝐘},
            f = {f}
          )},
          y = {η[𝐗]}
        )
      )
    )
  )]
}
