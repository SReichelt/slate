%../../../../logics/hlm%

/**
 * @references * https://en.wikipedia.org/wiki/Functor
 */
$Functors(
  U: %Symbol(auto = %true),
  𝓒: %Element(
    $Categories(U = {U}),
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        O: %Set,
        𝐀: %Binding(
          O,
          #(𝐁: %Binding(
            %previous,
            #(M: %Set)
          ))
        ),
        𝐂: %Binding(
          O,
          #(i: %Element(M[𝐂,𝐂]))
        ),
        𝐃: %Binding(
          O,
          #(𝐄: %Binding(
            %previous,
            #(𝐅: %Binding(
              %previous,
              #(∘: %Element($../../Essentials/Functions/Operations/Operations(
                X = {M[𝐄,𝐅]},
                Y = {M[𝐃,𝐄]},
                Z = {M[𝐃,𝐅]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(
            𝐖: %Element(O),
            𝐗: %Element(%previous),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(M[𝐖,𝐗]),
            g: %Element(M[𝐗,𝐘]),
            h: %Element(M[𝐘,𝐙])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐗,𝐙]},
              Y = {M[𝐖,𝐗]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐗,𝐙]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐙]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐙]},
                ∗ = {∘[𝐗,𝐘,𝐙]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {M[𝐘,𝐙]},
              Y = {M[𝐖,𝐘]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐘,𝐙]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐖,𝐗]},
                Z = {M[𝐖,𝐘]},
                ∗ = {∘[𝐖,𝐗,𝐘]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐘]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐘,𝐘]},
                x = {i[𝐘]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐗,𝐗]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐗,𝐘]},
                x = {f},
                y = {i[𝐗]}
              ),
              f
            )
          )
        )),
        _3: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘]),
            g: %Element(M[𝐘,𝐗]),
            _4: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐘,𝐗]},
                Z = {M[𝐘,𝐘]},
                ∗ = {∘[𝐘,𝐗,𝐘]},
                x = {f},
                y = {g}
              ),
              i[𝐘]
            )),
            _5: %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐗]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐗]},
                ∗ = {∘[𝐗,𝐘,𝐗]},
                x = {g},
                y = {f}
              ),
              i[𝐗]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  ),
  𝓓: %Element(
    %previous,
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        P: %Set,
        "𝐀'": %Binding(
          P,
          #("𝐁'": %Binding(
            %previous,
            #(N: %Set)
          ))
        ),
        "𝐂'": %Binding(
          P,
          #(j: %Element(N["𝐂'","𝐂'"]))
        ),
        "𝐃'": %Binding(
          P,
          #("𝐄'": %Binding(
            %previous,
            #("𝐅'": %Binding(
              %previous,
              #(∙: %Element($../../Essentials/Functions/Operations/Operations(
                X = {N["𝐄'","𝐅'"]},
                Y = {N["𝐃'","𝐄'"]},
                Z = {N["𝐃'","𝐅'"]}
              )))
            ))
          ))
        ),
        "_1'": %Constraint(%forall(
          #(
            "𝐖'": %Element(P),
            "𝐗'": %Element(%previous),
            "𝐘'": %Element(%previous),
            "𝐙'": %Element(%previous),
            f: %Element(N["𝐖'","𝐗'"]),
            g: %Element(N["𝐗'","𝐘'"]),
            h: %Element(N["𝐘'","𝐙'"])
          ),
          %equals(
            $../../Essentials/Functions/Operations/value(
              X = {N["𝐗'","𝐙'"]},
              Y = {N["𝐖'","𝐗'"]},
              Z = {N["𝐖'","𝐙'"]},
              ∗ = {∙["𝐖'","𝐗'","𝐙'"]},
              x = {$../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐙'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐙'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐙'"]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../../Essentials/Functions/Operations/value(
              X = {N["𝐘'","𝐙'"]},
              Y = {N["𝐖'","𝐘'"]},
              Z = {N["𝐖'","𝐙'"]},
              ∗ = {∙["𝐖'","𝐘'","𝐙'"]},
              x = {h},
              y = {$../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐖'","𝐗'"]},
                Z = {N["𝐖'","𝐘'"]},
                ∗ = {∙["𝐖'","𝐗'","𝐘'"]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        "_2'": %Constraint(%forall(
          #(
            "𝐗'": %Element(P),
            "𝐘'": %Element(%previous),
            f: %Element(N["𝐗'","𝐘'"])
          ),
          %and(
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐘'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐘'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐘'"]},
                x = {j["𝐘'"]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐗'","𝐗'"]},
                Z = {N["𝐗'","𝐘'"]},
                ∗ = {∙["𝐗'","𝐗'","𝐘'"]},
                x = {f},
                y = {j["𝐗'"]}
              ),
              f
            )
          )
        )),
        "_3'": %Constraint(%forall(
          #(
            "𝐗'": %Element(P),
            "𝐘'": %Element(%previous),
            f: %Element(N["𝐗'","𝐘'"]),
            g: %Element(N["𝐘'","𝐗'"]),
            "_4'": %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐗'","𝐘'"]},
                Y = {N["𝐘'","𝐗'"]},
                Z = {N["𝐘'","𝐘'"]},
                ∗ = {∙["𝐘'","𝐗'","𝐘'"]},
                x = {f},
                y = {g}
              ),
              j["𝐘'"]
            )),
            "_5'": %Constraint(%equals(
              $../../Essentials/Functions/Operations/value(
                X = {N["𝐘'","𝐗'"]},
                Y = {N["𝐗'","𝐘'"]},
                Z = {N["𝐗'","𝐗'"]},
                ∗ = {∙["𝐗'","𝐘'","𝐗'"]},
                x = {g},
                y = {f}
              ),
              j["𝐗'"]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  )
): %Construction {
  $functor(
    𝐗: %Binding(
      O,
      #(𝐏: %Element(P))
    ),
    𝐘: %Binding(
      O,
      #(𝐙: %Binding(
        O,
        #(f: %Binding(
          M[𝐘,𝐙],
          #(n: %Element(N[𝐏[𝐘],𝐏[𝐙]]))
        ))
      ))
    ),
    _1: %Constraint(%forall(
      #(𝐗: %Element(O)),
      %equals(n[𝐗,𝐗,i[𝐗]], j[𝐏[𝐗]])
    )),
    _2: %Constraint(%forall(
      #(
        𝐗: %Element(O),
        𝐘: %Element(%previous),
        𝐙: %Element(%previous),
        f: %Element(M[𝐗,𝐘]),
        g: %Element(M[𝐘,𝐙])
      ),
      %equals(
        n[
          𝐗,
          𝐙,
          $../../Essentials/Functions/Operations/value(
            X = {M[𝐘,𝐙]},
            Y = {M[𝐗,𝐘]},
            Z = {M[𝐗,𝐙]},
            ∗ = {∘[𝐗,𝐘,𝐙]},
            x = {g},
            y = {f}
          )
        ],
        $../../Essentials/Functions/Operations/value(
          X = {N[𝐏[𝐘],𝐏[𝐙]]},
          Y = {N[𝐏[𝐗],𝐏[𝐘]]},
          Z = {N[𝐏[𝐗],𝐏[𝐙]]},
          ∗ = {∙[𝐏[𝐗],𝐏[𝐘],𝐏[𝐙]]},
          x = {n[𝐘,𝐙,g]},
          y = {n[𝐗,𝐘,f]}
        )
      )
    ))
  ): %Constructor {
    display = [$Parens(
      body = $Table(
        items = [
          [
            $InnerParens(
              body = 𝓒,
              maxLevel = 0
            ),
            ' → ',
            $InnerParens(
              body = 𝓓,
              maxLevel = 0
            )
          ],
          [𝐗, ' ↦ ', 𝐏],
          [
            $Parens(
              body = $FunctionDefinition(
                function = f,
                symbol = '→',
                operands = [𝐘, 𝐙]
              ),
              style = '()'
            ),
            ' ↦ ',
            n
          ]
        ],
        style = 'aligned'
      ),
      style = '()'
    )],
    definitionDisplay = {
      parameter = #(F: %Expr),
      display = [$FunctionPrefix(
        function = F,
        body = [
          ' ',
          $Table(
            items = [
              [
                $InnerParens(
                  body = 𝓒,
                  maxLevel = 0
                ),
                ' → ',
                $InnerParens(
                  body = 𝓓,
                  maxLevel = 0
                )
              ],
              [𝐗, ' ↦ ', 𝐏],
              [
                $Parens(
                  body = $FunctionDefinition(
                    function = f,
                    symbol = '→',
                    operands = [𝐘, 𝐙]
                  ),
                  style = '()'
                ),
                ' ↦ ',
                n
              ]
            ],
            style = 'aligned'
          )
        ]
      )]
    },
    equalityDefinition = {
      leftParameters = #(
        𝐗: %Binding(
          O,
          #(𝐏: %Element(P))
        ),
        𝐘: %Binding(
          O,
          #(𝐙: %Binding(
            O,
            #(f: %Binding(
              M[𝐘,𝐙],
              #(n: %Element(N[𝐏[𝐘],𝐏[𝐙]]))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐗: %Element(O)),
          %equals(n[𝐗,𝐗,i[𝐗]], j[𝐏[𝐗]])
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(M[𝐗,𝐘]),
            g: %Element(M[𝐘,𝐙])
          ),
          %equals(
            n[
              𝐗,
              𝐙,
              $../../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐙]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐙]},
                ∗ = {∘[𝐗,𝐘,𝐙]},
                x = {g},
                y = {f}
              )
            ],
            $../../Essentials/Functions/Operations/value(
              X = {N[𝐏[𝐘],𝐏[𝐙]]},
              Y = {N[𝐏[𝐗],𝐏[𝐘]]},
              Z = {N[𝐏[𝐗],𝐏[𝐙]]},
              ∗ = {∙[𝐏[𝐗],𝐏[𝐘],𝐏[𝐙]]},
              x = {n[𝐘,𝐙,g]},
              y = {n[𝐗,𝐘,f]}
            )
          )
        ))
      ),
      rightParameters = #(
        "𝐗'": %Binding(
          O,
          #("𝐏'": %Element(P))
        ),
        "𝐘'": %Binding(
          O,
          #("𝐙'": %Binding(
            O,
            #(f: %Binding(
              M["𝐘'","𝐙'"],
              #("n'": %Element(N["𝐏'"["𝐘'"],"𝐏'"["𝐙'"]]))
            ))
          ))
        ),
        "_1'": %Constraint(%forall(
          #("𝐗'": %Element(O)),
          %equals("n'"["𝐗'","𝐗'",i["𝐗'"]], j["𝐏'"["𝐗'"]])
        )),
        "_2'": %Constraint(%forall(
          #(
            "𝐗'": %Element(O),
            "𝐘'": %Element(%previous),
            "𝐙'": %Element(%previous),
            "f'": %Element(M["𝐗'","𝐘'"]),
            "g'": %Element(M["𝐘'","𝐙'"])
          ),
          %equals(
            "n'"[
              "𝐗'",
              "𝐙'",
              $../../Essentials/Functions/Operations/value(
                X = {M["𝐘'","𝐙'"]},
                Y = {M["𝐗'","𝐘'"]},
                Z = {M["𝐗'","𝐙'"]},
                ∗ = {∘["𝐗'","𝐘'","𝐙'"]},
                x = {"g'"},
                y = {"f'"}
              )
            ],
            $../../Essentials/Functions/Operations/value(
              X = {N["𝐏'"["𝐘'"],"𝐏'"["𝐙'"]]},
              Y = {N["𝐏'"["𝐗'"],"𝐏'"["𝐘'"]]},
              Z = {N["𝐏'"["𝐗'"],"𝐏'"["𝐙'"]]},
              ∗ = {∙["𝐏'"["𝐗'"],"𝐏'"["𝐘'"],"𝐏'"["𝐙'"]]},
              x = {"n'"["𝐘'","𝐙'","g'"]},
              y = {"n'"["𝐗'","𝐘'","f'"]}
            )
          )
        ))
      ),
      definition = [%and(
        %forall(
          #(𝐗: %Element(O)),
          %equals(𝐏[𝐗], "𝐏'"[𝐗])
        ),
        %forall(
          #(
            𝐘: %Element(O),
            𝐙: %Element(O),
            f: %Element(M[𝐘,𝐙])
          ),
          %equals(n[𝐘,𝐙,f], "n'"[𝐘,𝐙,f])
        )
      )],
      isomorphic = %true
    }
  }

  display = [$FunctionOperator(
    symbol = '→',
    operands = [𝓒, 𝓓],
    minParenLevel = -1
  )],
  definitionDisplay = {
    parameter = #(F: %Expr),
    display = [$FunctionDefinition(
      function = F,
      symbol = '→',
      operands = [𝓒, 𝓓]
    )],
    singularName = 'functor',
    pluralName = 'functors',
    nameOptional = %true
  }
}
