%../../../logics/hlm%

/**
 * @remarks This definition retrieves a representative set of objects from a category (which is actually an equivalence class of categories), and enables typical abuse of notation.
 */
$Objects(
  U: %Symbol(auto = %true),
  𝓒: %Element(
    $Categories(U = {U}),
    shortcut = {
      constructor = $Categories(U = {U}).category,
      parameters = #(
        O: %Set,
        𝐀: %Binding(
          O,
          #(𝐁: %Binding(
            %previous,
            #(M: %Set)
          ))
        ),
        𝐂: %Binding(
          O,
          #(i: %Element(M[𝐂,𝐂]))
        ),
        𝐃: %Binding(
          O,
          #(𝐄: %Binding(
            %previous,
            #(𝐅: %Binding(
              %previous,
              #(∘: %Element($../Essentials/Functions/Operations/Operations(
                X = {M[𝐄,𝐅]},
                Y = {M[𝐃,𝐄]},
                Z = {M[𝐃,𝐅]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(
            𝐖: %Element(O),
            𝐗: %Element(%previous),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element(M[𝐖,𝐗]),
            g: %Element(M[𝐗,𝐘]),
            h: %Element(M[𝐘,𝐙])
          ),
          %equals(
            $../Essentials/Functions/Operations/value(
              X = {M[𝐗,𝐙]},
              Y = {M[𝐖,𝐗]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐗,𝐙]},
              x = {$../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐙]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐙]},
                ∗ = {∘[𝐗,𝐘,𝐙]},
                x = {h},
                y = {g}
              )},
              y = {f}
            ),
            $../Essentials/Functions/Operations/value(
              X = {M[𝐘,𝐙]},
              Y = {M[𝐖,𝐘]},
              Z = {M[𝐖,𝐙]},
              ∗ = {∘[𝐖,𝐘,𝐙]},
              x = {h},
              y = {$../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐖,𝐗]},
                Z = {M[𝐖,𝐘]},
                ∗ = {∘[𝐖,𝐗,𝐘]},
                x = {g},
                y = {f}
              )}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘])
          ),
          %and(
            %equals(
              $../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐘]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐘,𝐘]},
                x = {i[𝐘]},
                y = {f}
              ),
              f
            ),
            %equals(
              $../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐗,𝐗]},
                Z = {M[𝐗,𝐘]},
                ∗ = {∘[𝐗,𝐗,𝐘]},
                x = {f},
                y = {i[𝐗]}
              ),
              f
            )
          )
        )),
        _3: %Constraint(%forall(
          #(
            𝐗: %Element(O),
            𝐘: %Element(%previous),
            f: %Element(M[𝐗,𝐘]),
            g: %Element(M[𝐘,𝐗]),
            _4: %Constraint(%equals(
              $../Essentials/Functions/Operations/value(
                X = {M[𝐗,𝐘]},
                Y = {M[𝐘,𝐗]},
                Z = {M[𝐘,𝐘]},
                ∗ = {∘[𝐘,𝐗,𝐘]},
                x = {f},
                y = {g}
              ),
              i[𝐘]
            )),
            _5: %Constraint(%equals(
              $../Essentials/Functions/Operations/value(
                X = {M[𝐘,𝐗]},
                Y = {M[𝐗,𝐘]},
                Z = {M[𝐗,𝐗]},
                ∗ = {∘[𝐗,𝐘,𝐗]},
                x = {g},
                y = {f}
              ),
              i[𝐗]
            ))
          ),
          %equals(f, g)
        ))
      )
    }
  )
): %SetOperator {
  display = [$SubSup(
    body = 'Ob',
    sub = 𝓒
  )],
  definitionDisplay = {
    parameter = #(𝐗: %Expr),
    display = [$ElementParameter(
      element = 𝐗,
      set = 𝓒
    )]
  },
  definition = [O]
}
