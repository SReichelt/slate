%../../../../logics/hlm%

/**
 * @remarks This definition requires both categories to live in a common universe, which is not strictly required.
 *
 * @references * https://en.wikipedia.org/wiki/Functor
 *             * https://ncatlab.org/nlab/show/functor
 */
$Functors(
  U: %Symbol(auto = %true),
  𝓒: %Element($../Categories(U = {U})),
  𝓓: %Element(%previous)
): %Construction {
  $functor(
    𝐗: %Binding(
      $../Objects(
        U = {U},
        𝓒 = {𝓒}
      ),
      #(𝐃: %Element($../Objects(
        U = {U},
        𝓒 = {𝓓}
      )))
    ),
    𝐘: %Binding(
      $../Objects(
        U = {U},
        𝓒 = {𝓒}
      ),
      #(𝐙: %Binding(
        %previous,
        #(f: %Binding(
          $../Morphisms(
            U = {U},
            𝓒 = {𝓒},
            𝐗 = {𝐘},
            𝐘 = {𝐙}
          ),
          #(d: %Element($../Morphisms(
            U = {U},
            𝓒 = {𝓓},
            𝐗 = {𝐃[𝐘]},
            𝐘 = {𝐃[𝐙]}
          )))
        ))
      ))
    ),
    _1: %Constraint(%forall(
      #(𝐗: %Element($../Objects(
        U = {U},
        𝓒 = {𝓒}
      ))),
      %equals(
        d[
          𝐗,
          𝐗,
          $../identity(
            U = {U},
            𝓒 = {𝓒},
            𝐗 = {𝐗}
          )
        ],
        $../identity(
          U = {U},
          𝓒 = {𝓓},
          𝐗 = {𝐃[𝐗]}
        )
      )
    )),
    _2: %Constraint(%forall(
      #(
        𝐗: %Element($../Objects(
          U = {U},
          𝓒 = {𝓒}
        )),
        𝐘: %Element(%previous),
        𝐙: %Element(%previous),
        f: %Element($../Morphisms(
          U = {U},
          𝓒 = {𝓒},
          𝐗 = {𝐗},
          𝐘 = {𝐘}
        )),
        g: %Element($../Morphisms(
          U = {U},
          𝓒 = {𝓒},
          𝐗 = {𝐘},
          𝐘 = {𝐙}
        ))
      ),
      %equals(
        d[
          𝐗,
          𝐙,
          $../composition(
            U = {U},
            𝓒 = {𝓒},
            𝐗 = {𝐗},
            𝐘 = {𝐘},
            𝐙 = {𝐙},
            g = {g},
            f = {f}
          )
        ],
        $../composition(
          U = {U},
          𝓒 = {𝓓},
          𝐗 = {𝐃[𝐗]},
          𝐘 = {𝐃[𝐘]},
          𝐙 = {𝐃[𝐙]},
          g = {d[𝐘,𝐙,g]},
          f = {d[𝐗,𝐘,f]}
        )
      )
    ))
  ): %Constructor {
    display = [$Parens(
      body = $Table(
        items = [
          [
            $InnerParens(
              body = 𝓒,
              maxLevel = 0
            ),
            ' → ',
            $InnerParens(
              body = 𝓓,
              maxLevel = 0
            )
          ],
          [𝐗, ' ↦ ', 𝐃],
          [
            $Parens(
              body = $FunctionDefinition(
                function = f,
                symbol = '→',
                operands = [𝐘, 𝐙]
              ),
              style = '()'
            ),
            ' ↦ ',
            d
          ]
        ],
        style = 'aligned'
      ),
      style = '()'
    )],
    definitionDisplay = {
      parameter = #(F: %Expr),
      display = [$FunctionPrefix(
        function = F,
        body = [
          ' ',
          $Table(
            items = [
              [
                $InnerParens(
                  body = 𝓒,
                  maxLevel = 0
                ),
                ' → ',
                $InnerParens(
                  body = 𝓓,
                  maxLevel = 0
                )
              ],
              [𝐗, ' ↦ ', 𝐃],
              [
                $Parens(
                  body = $FunctionDefinition(
                    function = f,
                    symbol = '→',
                    operands = [𝐘, 𝐙]
                  ),
                  style = '()'
                ),
                ' ↦ ',
                d
              ]
            ],
            style = 'aligned'
          )
        ]
      )]
    },
    equalityDefinition = {
      leftParameters = #(
        𝐗: %Binding(
          $../Objects(
            U = {U},
            𝓒 = {𝓒}
          ),
          #(𝐃: %Element($../Objects(
            U = {U},
            𝓒 = {𝓓}
          )))
        ),
        𝐘: %Binding(
          $../Objects(
            U = {U},
            𝓒 = {𝓒}
          ),
          #(𝐙: %Binding(
            %previous,
            #(f: %Binding(
              $../Morphisms(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐘},
                𝐘 = {𝐙}
              ),
              #(d: %Element($../Morphisms(
                U = {U},
                𝓒 = {𝓓},
                𝐗 = {𝐃[𝐘]},
                𝐘 = {𝐃[𝐙]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐗: %Element($../Objects(
            U = {U},
            𝓒 = {𝓒}
          ))),
          %equals(
            d[
              𝐗,
              𝐗,
              $../identity(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐗}
              )
            ],
            $../identity(
              U = {U},
              𝓒 = {𝓓},
              𝐗 = {𝐃[𝐗]}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element($../Objects(
              U = {U},
              𝓒 = {𝓒}
            )),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element($../Morphisms(
              U = {U},
              𝓒 = {𝓒},
              𝐗 = {𝐗},
              𝐘 = {𝐘}
            )),
            g: %Element($../Morphisms(
              U = {U},
              𝓒 = {𝓒},
              𝐗 = {𝐘},
              𝐘 = {𝐙}
            ))
          ),
          %equals(
            d[
              𝐗,
              𝐙,
              $../composition(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐗},
                𝐘 = {𝐘},
                𝐙 = {𝐙},
                g = {g},
                f = {f}
              )
            ],
            $../composition(
              U = {U},
              𝓒 = {𝓓},
              𝐗 = {𝐃[𝐗]},
              𝐘 = {𝐃[𝐘]},
              𝐙 = {𝐃[𝐙]},
              g = {d[𝐘,𝐙,g]},
              f = {d[𝐗,𝐘,f]}
            )
          )
        ))
      ),
      rightParameters = #(
        𝐗: %Binding(
          $../Objects(
            U = {U},
            𝓒 = {𝓒}
          ),
          #("𝐃'": %Element($../Objects(
            U = {U},
            𝓒 = {𝓓}
          )))
        ),
        𝐘: %Binding(
          $../Objects(
            U = {U},
            𝓒 = {𝓒}
          ),
          #(𝐙: %Binding(
            %previous,
            #(f: %Binding(
              $../Morphisms(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐘},
                𝐘 = {𝐙}
              ),
              #("d'": %Element($../Morphisms(
                U = {U},
                𝓒 = {𝓓},
                𝐗 = {"𝐃'"[𝐘]},
                𝐘 = {"𝐃'"[𝐙]}
              )))
            ))
          ))
        ),
        _1: %Constraint(%forall(
          #(𝐗: %Element($../Objects(
            U = {U},
            𝓒 = {𝓒}
          ))),
          %equals(
            "d'"[
              𝐗,
              𝐗,
              $../identity(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐗}
              )
            ],
            $../identity(
              U = {U},
              𝓒 = {𝓓},
              𝐗 = {"𝐃'"[𝐗]}
            )
          )
        )),
        _2: %Constraint(%forall(
          #(
            𝐗: %Element($../Objects(
              U = {U},
              𝓒 = {𝓒}
            )),
            𝐘: %Element(%previous),
            𝐙: %Element(%previous),
            f: %Element($../Morphisms(
              U = {U},
              𝓒 = {𝓒},
              𝐗 = {𝐗},
              𝐘 = {𝐘}
            )),
            g: %Element($../Morphisms(
              U = {U},
              𝓒 = {𝓒},
              𝐗 = {𝐘},
              𝐘 = {𝐙}
            ))
          ),
          %equals(
            "d'"[
              𝐗,
              𝐙,
              $../composition(
                U = {U},
                𝓒 = {𝓒},
                𝐗 = {𝐗},
                𝐘 = {𝐘},
                𝐙 = {𝐙},
                g = {g},
                f = {f}
              )
            ],
            $../composition(
              U = {U},
              𝓒 = {𝓓},
              𝐗 = {"𝐃'"[𝐗]},
              𝐘 = {"𝐃'"[𝐘]},
              𝐙 = {"𝐃'"[𝐙]},
              g = {"d'"[𝐘,𝐙,g]},
              f = {"d'"[𝐗,𝐘,f]}
            )
          )
        ))
      ),
      definition = [%and(
        %forall(
          #(𝐗: %Element($../Objects(
            U = {U},
            𝓒 = {𝓒}
          ))),
          %equals(𝐃[𝐗], "𝐃'"[𝐗])
        ),
        %forall(
          #(
            𝐘: %Element($../Objects(
              U = {U},
              𝓒 = {𝓒}
            )),
            𝐙: %Element(%previous),
            f: %Element($../Morphisms(
              U = {U},
              𝓒 = {𝓒},
              𝐗 = {𝐘},
              𝐘 = {𝐙}
            ))
          ),
          %equals(d[𝐘,𝐙,f], "d'"[𝐘,𝐙,f])
        )
      )],
      isomorphic = %true
    }
  }

  display = [$FunctionOperator(
    symbol = '→',
    operands = [𝓒, 𝓓],
    minParenLevel = -1
  )],
  definitionDisplay = {
    parameter = #(F: %Expr),
    display = [$FunctionDefinition(
      function = F,
      symbol = '→',
      operands = [𝓒, 𝓓]
    )],
    singularName = 'functor',
    pluralName = 'functors',
    nameOptional = %true
  }
}
