%../../../../logics/hlm%

/**
 * @remarks Although it is possible to define functions in the usual set-theoretic way in HLM, the equivalent definition presented here uses a special HLM feature called “bindings.”
 *
 *          Its major advantage is that given a specific function defined via bindings, the value at a given input can be determined purely syntactically.
 * @references * [https://en.wikipedia.org/wiki/Function_(mathematics)](https://en.wikipedia.org/wiki/Function_(mathematics))
 *             * http://mathworld.wolfram.com/Function.html
 *             * https://proofwiki.org/wiki/Definition:Mapping
 */
$Functions(
  X: %Set,
  Y: %Set
): %Construction {
  $function(x: %Binding(
    X,
    #(y: %Element(Y))
  )): %Constructor {
    display = [$Parens(
      body = $Aligned(items = [
        [
          $InnerParens(
            body = X,
            maxLevel = 0
          ),
          ' → ',
          $InnerParens(
            body = Y,
            maxLevel = 0
          )
        ],
        [x, ' ↦ ', y]
      ]),
      style = '()'
    )],
    definitionDisplay = {
      parameter = #(f: %Expr),
      display = [$FunctionPrefix(
        function = f,
        body = [
          ' ',
          $Aligned(items = [
            [
              $InnerParens(
                body = X,
                maxLevel = 0
              ),
              ' → ',
              $InnerParens(
                body = Y,
                maxLevel = 0
              )
            ],
            [x, ' ↦ ', y]
          ])
        ]
      )]
    },
    equalityDefinition = {
      leftParameters = #(x: %Binding(
        X,
        #(y: %Element(Y))
      )),
      rightParameters = #(x: %Binding(
        X,
        #("y'": %Element(Y))
      )),
      definition = [%forall(
        #(x: %Element(X)),
        %equals(y[x], "y'"[x])
      )],
      isomorphic = %true
    }
  }

  display = [$FunctionOperator(
    symbol = '→',
    operands = [X, Y]
  )],
  definitionDisplay = {
    parameter = #(f: %Expr),
    display = [$FunctionDefinition(
      function = f,
      symbol = '→',
      operands = [X, Y]
    )],
    singularName = 'function',
    pluralName = 'functions',
    nameOptional = %true
  }
}
