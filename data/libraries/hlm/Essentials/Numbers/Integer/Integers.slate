%../../../../../logics/hlm%

/**
 * @remarks This is essentially the standard definition of integers as equivalence classes of pairs of natural numbers. We just use a notation that highlights the role of the two numbers in each pair.
 *
 *          Since an equality definition for each constructor is always part of a construction, we do not need to build the equivalence classes explicitly, they are implicit in the choice of the equality definition.
 *
 *          When defining a construction, another set can be embedded in the newly defined set, so in this case, we embed the natural numbers. Note that they are also embedded in the cardinal numbers.
 *
 * @references * https://en.wikipedia.org/wiki/Integer
 *             * http://mathworld.wolfram.com/Integer.html
 *             * https://proofwiki.org/wiki/Definition:Integer
 *             * https://ncatlab.org/nlab/show/integer
 *             * https://coq.inria.fr/library/Coq.ZArith.BinInt.html (but uses a different encoding as an inductive data type with three constructors)
 */
$Integers: %Construction {
  $difference(
    n: %Element($../Natural/"Natural numbers"),
    m: %Element(%previous)
  ): %Constructor {
    display = [$Parens(
      body = $Operator(
        symbol = '-',
        operands = [n, m],
        space = '',
        minParenLevel = 1,
        maxParenLevel = 1
      ),
      style = '[]'
    )],
    equalityDefinition = {
      leftParameters = #(
        n: %Element($../Natural/"Natural numbers"),
        m: %Element(%previous)
      ),
      rightParameters = #(
        "n'": %Element($../Natural/"Natural numbers"),
        "m'": %Element(%previous)
      ),
      definition = [%equals(
        $../Natural/sum(
          m = {n},
          n = {"m'"}
        ),
        $../Natural/sum(
          m = {"n'"},
          n = {m}
        )
      )]
    },
    rewrite = {
      value = $difference(
        b = {n},
        a = {m}
      ),
      theorem = $"Actual difference equals formal difference"
    }
  }

  display = ['â„¤'],
  embedding = {
    parameter = #(x: %Element($../Natural/"Natural numbers")),
    target = $Integers.difference(
        n = {x},
        m = {$../Natural/number(value = 0)}
    ),
    wellDefinednessProof = {
      parameters = #(
        x: %Element($../Natural/"Natural numbers"),
        y: %Element(%previous),
        _1: %Constraint(%equals(
          $Integers.difference(
              n = {x},
              m = {$../Natural/number(value = 0)}
          ),
          $Integers.difference(
              n = {y},
              m = {$../Natural/number(value = 0)}
          )
        ))
      ),
      goal = %equals(x, y),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %equals(
          $../Natural/sum(
            m = {x},
            n = {$../Natural/number(value = 0)}
          ),
          $../Natural/sum(
            m = {y},
            n = {$../Natural/number(value = 0)}
          )
        )),
        _: %ResolveDef(%equals(x, y))
      )
    }
  }
}
