%../../../../../logics/hlm%

/**
 * @remarks This lemma is necessary to prove the following theorem. _k_ and _f_ do not appear in the result, but they enable a proof via structural induction on _k_.
 */
$"Finiteness criterion lemma"(
  M: %Subset($"Natural numbers"),
  k: %Element($"Natural numbers"),
  f: %Element($../../Functions/Bijections(
    X = {$Subsets/"Segment (less or equal)"(n = {k})},
    Y = {M}
  ))
): %StandardTheorem {
  claim = %exists(
    #(m: %Element(M)),
    formula = %forall(
      #(n: %Element(M)),
      $"less or equal"(
        m = {n},
        n = {m}
      )
    )
  ),
  proofs = [{steps = #(_: %State(
    %structural(
      k,
      $"Natural numbers",
      [
        {
          constructor = $"Natural numbers".zero,
          value = %exists(
            #(a: %Element(M)),
            formula = %forall(
              #(b: %Element(M)),
              $"less or equal"(
                m = {b},
                n = {a}
              )
            )
          ),
          rewrite = %true
        },
        {
          constructor = $"Natural numbers".successor,
          parameters = #(x: %Element($"Natural numbers")),
          value = %exists(
            #(c: %Element(M)),
            formula = %forall(
              #(d: %Element(M)),
              $"less or equal"(
                m = {d},
                n = {c}
              )
            )
          ),
          rewrite = %true
        }
      ]
    ),
    proof = {steps = #(_: %ProveCases(caseProofs = [
      {
        goal = %exists(
          #(a: %Element(M)),
          formula = %forall(
            #(b: %Element(M)),
            $"less or equal"(
              m = {b},
              n = {a}
            )
          )
        ),
        steps = #(_: %ProveExists({a = {$../../Functions/value(
          X = {$Subsets/"Segment (less or equal)"(n = {k})},
          Y = {M},
          f = {f},
          x = {$number(value = 0)}
        )}}))
      },
      {
        parameters = #(x: %Element($"Natural numbers")),
        goal = %exists(
          #(c: %Element(M)),
          formula = %forall(
            #(d: %Element(M)),
            $"less or equal"(
              m = {d},
              n = {c}
            )
          )
        ),
        steps = #(
          S: %SetDef($Subsets/"Segment (less or equal)"(n = {x})),
          _: %UseTheorem(
            $"Finiteness criterion lemma"(
              M = {$../../Functions/Image(
                X = {$Subsets/"Segment (less or equal)"(n = {k})},
                Y = {M},
                f = {f},
                S = {S}
              )},
              k = {x},
              f = {$../../Functions/restriction(
                X = {$Subsets/"Segment (less or equal)"(n = {k})},
                Y = {M},
                f = {f},
                A = {S}
              )}
            ),
            %exists(
              #(i: %Element(M)),
              formula = %forall(
                #(j: %Element($../../Functions/Image(
                  X = {$Subsets/"Segment (less or equal)"(n = {k})},
                  Y = {M},
                  f = {f},
                  S = {S}
                ))),
                $"less or equal"(
                  m = {j},
                  n = {i}
                )
              )
            )
          ),
          _: %UseExists({
            parameters = #(i: %Element(M)),
            steps = #(_: %ProveExists({c = {%cases([
              {
                formula = $less(
                  n = {$../../Functions/value(
                    X = {$Subsets/"Segment (less or equal)"(n = {k})},
                    Y = {M},
                    f = {f},
                    x = {k}
                  )},
                  m = {i}
                ),
                value = $../../Functions/value(
                  X = {$Subsets/"Segment (less or equal)"(n = {k})},
                  Y = {M},
                  f = {f},
                  x = {k}
                )
              },
              {
                formula = $"less or equal"(
                  m = {$../../Functions/value(
                    X = {$Subsets/"Segment (less or equal)"(n = {k})},
                    Y = {M},
                    f = {f},
                    x = {k}
                  )},
                  n = {i}
                ),
                value = i
              }
            ])}}))
          })
        )
      }
    ]))}
  ))}]
}
