%../../../../../../logics/hlm%

/**
 * @remarks Note that this definition presupposes that _n_ is greater than 1. Otherwise, not all equivalences would hold.
 *
 *          In particular, this makes it impossible to ask whether 1 is prime. However, it is rarely necessary to ask whether a given number is prime without knowing that it is greater than 1. For definitions and theorems involving the [set of prime numbers](Prime%20numbers), no such explicit exclusion of 1 is necessary.
 *
 * @references * https://en.wikipedia.org/wiki/Prime_number
 *             * https://en.wikipedia.org/wiki/Euclid%27s_lemma
 *             * http://mathworld.wolfram.com/PrimeNumber.html
 *             * https://proofwiki.org/wiki/Definition:Prime_Number
 *             * https://ncatlab.org/nlab/show/prime+number
 *             * https://coq.inria.fr/library/Coq.ZArith.Znumtheory.html#prime
 */
$prime(n: %Element($../Subsets/"Segment (greater)"(n = {$../number(value = 1)}))): %Predicate {
  display = [$Property(
    property = %neg('prime', 'composite'),
    operand = n
  )],
  definition = [
    %forall(
      #(
        m: %Element($../Subsets/"Positive numbers"),
        _1: %Constraint($../divisible(
          m = {m},
          n = {n}
        ))
      ),
      %or(
        %equals(
          m,
          $../number(value = 1)
        ),
        %equals(m, n)
      )
    ),
    %forall(
      #(
        l: %Element($../Subsets/"Segment (greater)"(n = {$../number(value = 1)})),
        _2: %Constraint($../divisible(
          m = {l},
          n = {n}
        ))
      ),
      %equals(l, n)
    ),
    %sub(
      $../Divisors(n = {n}),
      %enumeration(
        $../number(value = 1),
        n
      )
    ),
    %setEquals(
      $../Divisors(n = {n}),
      %enumeration(
        $../number(value = 1),
        n
      )
    ),
    %equals(
      $../../Cardinal/"Cardinal numbers".cardinality(S = {$../Divisors(n = {n})}),
      $../number(value = 2)
    ),
    %forall(
      #(
        a: %Element($../"Natural numbers"),
        b: %Element(%previous),
        _3: %Constraint(%equals(
          n,
          $../product(
            m = {a},
            n = {b}
          )
        ))
      ),
      %or(
        %and(
          %equals(
            a,
            $../number(value = 1)
          ),
          %equals(b, n)
        ),
        %and(
          %equals(a, n),
          %equals(
            b,
            $../number(value = 1)
          )
        )
      )
    ),
    %not(%exists(
      #(
        c: %Element($../Subsets/"Segment (less)"(n = {n})),
        d: %Element(%previous)
      ),
      formula = %equals(
        n,
        $../product(
          m = {c},
          n = {d}
        )
      )
    )),
    %forall(
      #(
        e: %Element($../"Natural numbers"),
        f: %Element(%previous),
        _5: %Constraint($../divisible(
          m = {n},
          n = {$../product(
            m = {e},
            n = {f}
          )}
        ))
      ),
      %or(
        $../divisible(
          m = {n},
          n = {e}
        ),
        $../divisible(
          m = {n},
          n = {f}
        )
      )
    )
  ]
}
