%../../../../../logics/hlm%

$minimum(
  M: %Subset($"Natural numbers"),
  _1: %Constraint(%not($../../Sets/empty(S = {M})))
): %ImplicitOperator {
  display = [$Function(
    function = 'min',
    arguments = [M]
  )],
  parameter = #(m: %Element(M)),
  definition = [
    %forall(
      #(n: %Element(M)),
      $"less or equal"(
        m = {m},
        n = {n}
      )
    ),
    %forall(
      #(
        l: %Element(M),
        _2: %Constraint($"less or equal"(
          m = {l},
          n = {m}
        ))
      ),
      %equals(l, m)
    ),
    %not(%exists(
      #(k: %Element(M)),
      formula = $less(
        m = {k},
        n = {m}
      )
    ))
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(@: %Constraint(%forall(
        #(n: %Element(M)),
        $"less or equal"(
          m = {m},
          n = {n}
        )
      ))),
      steps = #(_: %ProveForAll({
        parameters = #(
          l: %Element(M),
          _2: %Constraint($"less or equal"(
            m = {l},
            n = {m}
          ))
        ),
        goal = %equals(l, m),
        steps = #(
          _: %Consider(@),
          _: %UseForAll({n = {l}}),
          _: %UseTheorem(
            $"Comparison is antisymmetric"(
              a = {l},
              b = {m}
            ),
            %equals(l, m)
          )
        )
      }))
    },
    {
      from = 2,
      to = 3,
      parameters = #(@: %Constraint(%forall(
        #(
          l: %Element(M),
          _2: %Constraint($"less or equal"(
            m = {l},
            n = {m}
          ))
        ),
        %equals(l, m)
      ))),
      steps = #(_: %ProveNeg({
        parameters = #(_1: %Constraint(%exists(
          #(k: %Element(M)),
          formula = $less(
            m = {k},
            n = {m}
          )
        ))),
        steps = #(_: %UseExists({
          parameters = #(
            k: %Element(M),
            _2: %Constraint($less(
              m = {k},
              n = {m}
            ))
          ),
          steps = #(
            _: %UseDef(result = %and(
              $"less or equal"(
                m = {k},
                n = {m}
              ),
              %not(%equals(k, m))
            )),
            _: %Consider(@),
            _: %UseForAll({l = {k}})
          )
        }))
      }))
    },
    {
      from = 3,
      to = 1,
      steps = #(_: %ProveNeg({
        parameters = #(_1: %Constraint(%exists(
          #(n: %Element(M)),
          formula = $less(
            n = {m},
            m = {n}
          )
        ))),
        steps = #()
      }))
    }
  ],
  wellDefinednessProof = {
    goal = %exists(
      #(
        a: %Element(M),
        _4: %Constraint(%forall(
          #(b: %Element(M)),
          $"less or equal"(
            m = {a},
            n = {b}
          )
        ))
      ),
      formula = %forall(
        #(
          c: %Element(M),
          _5: %Constraint(%forall(
            #(d: %Element(M)),
            $"less or equal"(
              m = {c},
              n = {d}
            )
          ))
        ),
        %equals(c, a)
      )
    ),
    steps = #(
      _: %UseTheorem(
        $"Well-ordering principle"(M = {M}),
        %exists(
          #(x: %Element(M)),
          formula = %forall(
            #(y: %Element(M)),
            $"less or equal"(
              m = {x},
              n = {y}
            )
          )
        )
      ),
      _: %UseExists({
        parameters = #(
          x: %Element(M),
          _6: %Constraint(%forall(
            #(y: %Element(M)),
            $"less or equal"(
              m = {x},
              n = {y}
            )
          ))
        ),
        steps = #(_: %ProveExists(
          {a = {x}},
          proof = {
            goal = %forall(
              #(
                c: %Element(M),
                _5: %Constraint(%forall(
                  #(d: %Element(M)),
                  $"less or equal"(
                    m = {c},
                    n = {d}
                  )
                ))
              ),
              %equals(c, x)
            ),
            steps = #(_: %ProveForAll({
              parameters = #(
                c: %Element(M),
                _5: %Constraint(%forall(
                  #(d: %Element(M)),
                  $"less or equal"(
                    m = {c},
                    n = {d}
                  )
                ))
              ),
              goal = %equals(c, x),
              steps = #(
                _: %Consider(_5),
                _: %UseForAll({d = {x}}),
                _: %Consider(_6),
                _: %UseForAll({y = {c}}),
                _: %UseTheorem(
                  $"Comparison is antisymmetric"(
                    a = {c},
                    b = {x}
                  ),
                  %equals(c, x)
                )
              )
            }))
          }
        ))
      })
    )
  }
}
