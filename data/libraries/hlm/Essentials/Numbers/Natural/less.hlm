%../../../../../logics/hlm%

/**
 * @references * https://coq.inria.fr/library/Coq.Init.Nat.html#ltb
 *             * https://coq.inria.fr/library/Coq.NArith.BinNatDef.html#N.ltb
 */
$less(
  m: %Element($"Natural numbers"),
  n: %Element(%previous)
): %Predicate {
  display = [
    $Relation(
      symbol = %neg('<', '≮'),
      operands = [m, n]
    ),
    $Relation(
      symbol = %neg('>', '≯'),
      operands = [n, m]
    )
  ],
  definition = [
    %not($"less or equal"(
      n = {m},
      m = {n}
    )),
    $"less or equal"(
      m = {$sum(
        m = {m},
        n = {$number(value = 1)}
      )},
      n = {n}
    ),
    %and(
      $"less or equal"(
        m = {m},
        n = {n}
      ),
      %not(%equals(m, n))
    ),
    %exists(
      #(x: %Element($"Positive numbers")),
      formula = %equals(
        $sum(
          m = {m},
          n = {x}
        ),
        n
      )
    ),
    %and(
      %not(%equals(m, n)),
      %structural(
        m,
        $"Natural numbers",
        [
          {
            constructor = $"Natural numbers".zero,
            value = %and,
            rewrite = %true
          },
          {
            constructor = $"Natural numbers".successor,
            parameters = #(y: %Element($"Natural numbers")),
            value = $less(
              m = {y},
              n = {n}
            ),
            rewrite = %true
          }
        ]
      )
    ),
    %structural(
      n,
      $"Natural numbers",
      [
        {
          constructor = $"Natural numbers".zero,
          value = %or,
          rewrite = %true
        },
        {
          constructor = $"Natural numbers".successor,
          parameters = #(z: %Element($"Natural numbers")),
          value = %or(
            $less(
              m = {m},
              n = {z}
            ),
            %equals(m, z)
          ),
          rewrite = %true
        }
      ]
    )
  ]
}
