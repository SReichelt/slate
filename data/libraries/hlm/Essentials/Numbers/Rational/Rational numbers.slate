%../../../../../logics/hlm%

/**
 * @remarks This definition is rather similar to the definition of [integers](../Integer/Integers). Again, the constructor notation is later justified by a [proposition](Actual%20quotient%20equals%20formal%20quotient).
 *
 *          Note that in the constructor, we force the denominator to be positive. This is not required at this point, since the given equality definition would also work for negative numbers. However, if the denominator was allowed to be negative, the definition of [comparison](less%20or%20equal) would probably need to be split into several cases.
 *
 * @references * https://coq.inria.fr/library/Coq.QArith.QArith_base.html
 */
$"Rational numbers": %Construction {
  $quotient(
    n: %Element($../Integer/Integers),
    d: %Element($../Natural/Subsets/"Positive numbers")
  ): %Constructor {
    display = [$Parens(
      body = $Operator(
        symbol = '/',
        operands = [n, d],
        space = '',
        minParenLevel = 2,
        maxParenLevel = 2
      ),
      style = '()'
    )],
    equalityDefinition = {
      leftParameters = #(
        n: %Element($../Integer/Integers),
        d: %Element($../Natural/Subsets/"Positive numbers")
      ),
      rightParameters = #(
        "n'": %Element($../Integer/Integers),
        "d'": %Element($../Natural/Subsets/"Positive numbers")
      ),
      definition = [%equals(
        $../Integer/product(
          a = {n},
          b = {"d'"}
        ),
        $../Integer/product(
          a = {"n'"},
          b = {d}
        )
      )]
    },
    rewrite = {
      value = $quotient(
        b = {n},
        a = {d}
      ),
      theorem = $"Actual quotient equals formal quotient"
    }
  }

  display = ['â„š'],
  embedding = {
    parameter = #(x: %Element($../Integer/Integers)),
    target = $"Rational numbers".quotient(
        n = {x},
        d = {$../Natural/number(value = 1)}
    )
  }
}
