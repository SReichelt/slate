%../../../../../logics/hlm%

/**
 * @remarks In HLM, cardinal numbers have a very simple definition as a construction with one constructor, which can be conveniently equipped with a notation that matches mathematical practice.
 *
 *          Given that two arbitrary sets cannot be compared element-wise due to the type system, the equality definition for cardinal numbers is the most general definition possible: No other valid equality definition can possibly distinguish two equipollent sets. This implies that definitions involving the ‚Äúdeconstruction‚Äù of cardinal numbers into sets are automatically well-defined.
 *
 *          HLM does not distinguish between sets and proper classes; instead there are rules preventing certain circularities. Thus, the set of cardinals can be treated like any other set in most situations.
 *
 *          When defining a construction, an embedding from another set into the newly defined set can be specified, subject to a suitable well-definedness condition. Embedding the natural numbers in the cardinal numbers simplifies a lot of definitions, including e.g. the definition of [finiteness](../../Sets/finite).
 *
 *          In a way, the definition of cardinal numbers in HLM is very similar to the definition of algebraic structures such as [magmas](../../../Algebra/Magmas/Magmas). This is especially visible in the use of this definition in the [category of sets](../../../Category%20theory/Categories/cardinals).
 *
 * @references * https://en.wikipedia.org/wiki/Cardinal_number
 *             * http://mathworld.wolfram.com/CardinalNumber.html
 *             * https://proofwiki.org/wiki/Definition:Cardinal
 *             * https://ncatlab.org/nlab/show/cardinal+number
 */
$"Cardinal numbers": %Construction {
  $cardinality(S: %Set): %Constructor {
    display = [$Parens(
      body = S,
      style = '||'
    )],
    equalityDefinition = {
      leftParameters = #(S: %Set),
      rightParameters = #(T: %Set),
      definition = [%exists(#(f: %Element($../../Functions/Bijections(
        X = {S},
        Y = {T}
      ))))],
      isomorphic = %true
    }
  }

  display = ['ùìíùìªùì≠'],
  embedding = {
    parameter = #(n: %Element($../Natural/"Natural numbers")),
    target = $"Cardinal numbers".cardinality(S = {$../Natural/"Segment (less)"(n = {n})}),
    wellDefinednessProof = {
      parameters = #(
        m: %Element($../Natural/"Natural numbers"),
        n: %Element(%previous),
        _1: %Constraint(%equals(
          $"Cardinal numbers".cardinality(S = {$../Natural/"Segment (less)"(n = {m})}),
          $"Cardinal numbers".cardinality(S = {$../Natural/"Segment (less)"(n = {n})})
        ))
      ),
      goal = %equals(m, n),
      steps = #(
        _: %Consider(_1),
        _: %UseDef(result = %exists(#(f: %Element($../../Functions/Bijections(
          X = {$../Natural/"Segment (less)"(n = {m})},
          Y = {$../Natural/"Segment (less)"(n = {n})}
        ))))),
        _: %UseExists({
          parameters = #(f: %Element($../../Functions/Bijections(
            X = {$../Natural/"Segment (less)"(n = {m})},
            Y = {$../Natural/"Segment (less)"(n = {n})}
          ))),
          steps = #(_: %UseTheorem(
            $"Natural cardinality lemma"(
              m = {m},
              n = {n},
              f = {f}
            ),
            %equals(m, n)
          ))
        })
      )
    }
  }
}
