%../../../../logics/hlm%

/**
 * @remarks This definition constructs a partial order on the Cartesian product of two sets _S_ and _T_ from partial orders on _S_ and _T_, combining the two partial orders lexicographically. It is used to define [multiplication of ordinal numbers](../Numbers/Ordinal/product).
 */
$"lexicographical order"(
  S: %Set(auto = %true),
  T: %Set(auto = %true),
  ⪯: %Element($Endorelations(S = {S})),
  _1: %Constraint($"partial order"(
    S = {S},
    ≺ = {⪯}
  )),
  ⊑: %Element($Endorelations(S = {T})),
  _2: %Constraint($"partial order"(
    S = {T},
    ≺ = {⊑}
  ))
): %ExplicitOperator {
  display = [$Operator(
    symbol = '∠',
    operands = [⪯, ⊑]
  )],
  definition = [$Endorelations(S = {$../Sets/"Cartesian product"(
      S = {S},
      T = {T}
    )}).relation(s = {
      #(_a: %Element($../Sets/"Disjoint union"(
        S = {S},
        T = {T}
      ))),
      {t = {
        #(_b: %Element($../Sets/"Disjoint union"(
          S = {S},
          T = {T}
        ))),
        {p = {%structural(
          _b,
          $../Sets/"Cartesian product"(
            S = {S},
            T = {T}
          ),
          [{
            constructor = $../Sets/"Cartesian product"(
                S = {S},
                T = {T}
              ).pair,
            parameters = #(
              "s'": %Element(S),
              "t'": %Element(T)
            ),
            value = %structural(
              _a,
              $../Sets/"Cartesian product"(
                S = {S},
                T = {T}
              ),
              [{
                constructor = $../Sets/"Cartesian product"(
                    S = {S},
                    T = {T}
                  ).pair,
                parameters = #(
                  s: %Element(S),
                  t: %Element(T)
                ),
                value = %and(
                  $related(
                    S = {S},
                    T = {S},
                    ≺ = {⪯},
                    s = {s},
                    t = {"s'"}
                  ),
                  %or(
                    %not(%equals(s, "s'")),
                    $related(
                      S = {T},
                      T = {T},
                      ≺ = {⊑},
                      s = {t},
                      t = {"t'"}
                    )
                  )
                )
              }]
            )
          }]
        )}}
      }}
  })]
}
