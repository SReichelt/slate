%../../../../logics/hlm%

/**
 * @remarks In HLM, multiple alternative definitions can be given for an operator or predicate, if they can be shown to be equal/equivalent. In proofs, the most convenient alternative can be selected at will, which reduces the number of necessary steps. Sometimes, it also makes sense to prove a property according to one alternative and then use it according to another.
 */
$empty(S: %Set): %Predicate {
  display = [$Property(
    operand = S,
    property = %neg('empty', 'nonempty')
  )],
  definition = [
    %setEquals(
      S,
      $"Empty set"
    ),
    %sub(
      S,
      $"Empty set"
    ),
    %not(%exists(#(x: %Element(S))))
  ],
  equivalenceProofs = [
    {
      from = 1,
      to = 2,
      parameters = #(@: %Constraint(%setEquals(
        S,
        $"Empty set"
      ))),
      goal = %sub(
        S,
        $"Empty set"
      ),
      steps = #(_: %Consider(@), _: %UseDef(result = %sub(
        S,
        $"Empty set"
      )))
    },
    {
      from = 2,
      to = 3,
      parameters = #(@: %Constraint(%sub(
        S,
        $"Empty set"
      ))),
      goal = %not(%exists(#(x: %Element(S)))),
      steps = #(_: %ProveNeg({
        parameters = #(_1: %Constraint(%exists(#(x: %Element(S))))),
        steps = #(_: %UseExists({
          parameters = #(x: %Element(S)),
          steps = #(
            _: %Consider(@),
            _: %UseDef(result = %forall(
              #(s: %Element(S)),
              %in(
                s,
                $"Empty set"
              )
            )),
            _: %UseForAll({s = {x}}),
            _: %UseDef(result = %or)
          )
        }))
      }))
    },
    {
      from = 3,
      to = 1,
      parameters = #(@: %Constraint(%not(%exists(#(x: %Element(S)))))),
      goal = %setEquals(
        S,
        $"Empty set"
      ),
      steps = #(_: %ProveSetEquals(
        subsetProof = {steps = #(_: %ProveDef(proof = {
          goal = %forall(
            #(a: %Element(S)),
            %in(
              a,
              $"Empty set"
            )
          ),
          steps = #(_: %ProveForAll({
            parameters = #(a: %Element(S)),
            goal = %in(
              a,
              $"Empty set"
            ),
            steps = #(_: %State(
              %exists(#(x: %Element(S))),
              proof = {steps = #(_: %ProveExists({x = {a}}))}
            ))
          }))
        }))},
        supersetProof = {steps = #(_: %UseTheorem(
          $"Empty set is subset of any set"(S = {S}),
          %sub(
            $"Empty set",
            S
          )
        ))}
      ))
    }
  ]
}
