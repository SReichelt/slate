%display%

/**
 * Applies a special style class to a rendered expression.
 * The effect of this style class is defined in a CSS file.
 *
 * @param body The expression to decorate.
 * @param styleClass The name of the style class as it appears in CSS.
 */
$Style(body: %Expr, styleClass: %String): %Template {}

/**
 * Adds parentheses around an expression.
 *
 * @param body The inner expression.
 * @param style One of '()', '||', '[]', '{}', '{', or '<>'.
 *
 * @example `$Parens(body = a, style = '()')`
 * @example `$Parens(body = a, style = '||')`
 * @example `$Parens(body = a, style = '[]')`
 * @example `$Parens(body = a, style = '{}')`
 * @example `$Parens(body = a, style = '<>')`
 */
$Parens(body: %Expr, style: %String): %Template {}

/**
 * Ensures that parentheses are added around the given expression if necessary.
 * Should be used to decorate arguments of the current symbol or template, i.e. its "inner expressions".
 * Parentheses are added if the inner expression is itself decorated using `$OuterParens`.
 * The parentheses style is determined by the type of the inner expression.
 *
 * @param body The inner expression.
 *
 * @param maxLevel Determines when parentheses are required:
 *                 * If `maxLevel` is set in `$InnerParens` and `minLevel` is set in the corresponding `$OuterParens` instance, parentheses are added if `minLevel` <= `maxLevel`.
 *                   In terms of operator precedence, parentheses are omitted if the inner expression binds more strongly than `maxLevel`.
 *                 * Otherwise, parentheses are always added.
 *
 *                 Parentheses levels currently in use are:
 *                 * -3: Implication and equivalence.
 *                 * -2: Boolean operators and quantification.
 *                 * -1: Relations, both built-in and user-defined.
 *                 * 0: Separation of function domain and codomain (→).
 *                 * 1: Addition and subtraction.
 *                 * 2: Multiplication. Also used for the Cartesian product, so that no parentheses are added around A × B in A × B → C.
 *                 * 3: Exponentiation, or more precisely all expressions with superscripts or subscripts. In most cases, `maxLevel` should be less than this number, i.e. inner expressions with superscripts or subscripts do not require parentheses.
 *
 * @param left Parentheses will only be added if `left` is set in both `$InnerParens` and `$OuterParens`, or if `right` is set in both `$InnerParens` and `$OuterParens`. `left` can be set to false if the content surrounding the `$InnerParens` instance is sufficiently bounded on the left.
 * @param right Parentheses will only be added if `left` is set in both `$InnerParens` and `$OuterParens`, or if `right` is set in both `$InnerParens` and `$OuterParens`. `right` can be set to false if the content surrounding the `$InnerParens` instance is sufficiently bounded on the right.
 */
$InnerParens(body: %Expr, maxLevel?: %Int, left: %Bool = %true, right: %Bool = %true): %Template {}

/**
 * Ensures that parentheses are added around the given expression if necessary.
 * Should be used to decorate the entire current symbol or template.
 * Parentheses are added if the expression is instantiated at a location decorated with `$InnerParens`.
 * The parentheses style is determined by the type of the expression.
 *
 * @param body The inner expression, i.e. the symbol or template being defined.
 *
 * @param minLevel Determines when parentheses are required:
 *                 * If `minLevel` is set in `$OuterParens` and `maxLevel` is set in the corresponding `$InnerParens` instance, parentheses are added if `minLevel` <= `maxLevel`.
 *                   In terms of operator precedence, parentheses are omitted if the outer expression binds less strongly than `minLevel`.
 *                 * Otherwise, parentheses are always added.
 *
 *                 Parentheses levels currently in use are:
 *                 * -3: Implication and equivalence.
 *                 * -2: Boolean operators and quantification.
 *                 * -1: Relations, both built-in and user-defined.
 *                 * 0: Separation of function domain and codomain (→).
 *                 * 1: Addition and subtraction.
 *                 * 2: Multiplication. Also used for the Cartesian product, so that no parentheses are added around A × B in A × B → C.
 *                 * 3: Exponentiation, or more precisely all expressions with superscripts or subscripts. In most cases, `maxLevel` should be less than this number, i.e. inner expressions with superscripts or subscripts do not require parentheses.
 *
 * @param left Parentheses will only be added if `left` is set in both `$InnerParens` and `$OuterParens`, or if `right` is set in both `$InnerParens` and `$OuterParens`. `left` can be set to false if inner expression is sufficiently bounded on the left.
 * @param right Parentheses will only be added if `left` is set in both `$InnerParens` and `$OuterParens`, or if `right` is set in both `$InnerParens` and `$OuterParens`. `right` can be set to false if the inner expression is sufficiently bounded on the right.
 */
$OuterParens(body: %Expr, minLevel?: %Int, left: %Bool = %true, right: %Bool = %true): %Template {}

/**
 * Arranges a two-dimensional array of expressions as a table.
 *
 * @param items A two-dimensional array of expressions, where each inner array represents a row. Rows do not necessarily need to have the same length.
 * @param style Determines how the items are arranged. Currently supported values are:
 *              * 'matrix': Standard table with horizontally centered cells that are spaced apart. Also used for vectors.
 *              * 'aligned': The first column is right-aligned, the other columns are left-aligned. No horizontal space is added between columns.
 *              * 'cases': Several left-aligned columns with large horizontal spacing. Used to render cases with conditions.
 *              * 'single-case': Very similar to 'cases', but omits extra padding around the entire table because a single case is displayed in an "inline" fashion.
 *              * 'vertical-tuple': Used to display large tuples in a vertical format (see `$VerticalTuple`), in particular the objects and morphisms of individual categories. In contrast to 'matrix', cells are left-aligned.
 *              * 'binom': Binomial coefficient, similar to a matrix but with less spacing.
 *              * 'construction': Used to define the contents of a construction. Includes a vertical line between the first two columns.
 *
 * @example `$Table(items = [[a, b], [c, d]], style = 'matrix')`
 */
$Table(items: %Expr[,], style: %String): %Template {}

/**
 * Adds a subscript and/or superscript to an expression. More generally, subscripts and superscripts can be added at all four corners.
 *
 * @param body The main expression. `$SubSup` implicitly decorates `body` with `$InnerParens`, i.e. parentheses are added whenever the contents of `body` are decorated with `$OuterParens`, regardless of the level.
 * @param sub A subscript to be added after `body`.
 * @param sup A superscript to be added after `body`.
 * @param preSub A subscript to be added before `body`.
 * @param preSup A superscript to be added before `body`.
 *
 * @example `$SubSup(body = a, sub = b)`
 * @example `$SubSup(body = a, sup = c)`
 * @example `$SubSup(body = a, sub = b, sup = c)`
 * @example `$SubSup(body = a, sub = b, sup = c, preSub = d, preSup = e)`
 */
$SubSup(body: %Expr, sub?: %Expr, sup?: %Expr, preSub?: %Expr, preSup?: %Expr): %Template {}

/**
 * Adds expressions above and/or below a main expression.
 *
 * @param body The main expression.
 * @param over An expression to be added above `body`.
 * @param under An expression to be added below `body`.
 * @param style Set to 'shallow' to reduce space between the expressions. This typically depends on the contents of `body`.
 *
 * @example `$OverUnder(body = a, over = b)`
 * @example `$OverUnder(body = a, under = c)`
 * @example `$OverUnder(body = a, over = b, under = c)`
 */
$OverUnder(body: %Expr, over?: %Expr, under?: %Expr, style?: %String): %Template {}

/**
 * A fraction that is layed out vertically.
 *
 * @param numerator The expression at the top.
 * @param denominator The expression at the bottom.
 *
 * @example `$Fraction(numerator = a, denominator = b)`
 */
$Fraction(numerator: %Expr, denominator: %Expr): %Template {}

/**
 * A radical symbol with optional degree.
 *
 * @param radicand The expression under the radical symbol.
 * @param degree An optional expression to be placed on the left of the radical symbol.
 *
 * @example `$Radical(radicand = a)`
 * @example `$Radical(radicand = a, degree = b)`
 */
$Radical(radicand: %Expr, degree?: %Expr): %Template {}

/**
 * The colon to use for ":=" and ":⇔". Used internally by other templates.
 */
$DefinitionColon: %Template {
  display = $Style(
    body = ':',
    styleClass = 'def-colon'
  )
}

/**
 * An horizontal ellipsis that is aligned to the bottom of the expression.
 */
$BottomEllipsis: %Template {
  /* Not using unicode character '…' because it has too much space in TeX font. */
  display = '...'
}

/**
 * An horizontal ellipsis that is aligned to the middle of the expression.
 */
$MiddleEllipsis: %Template {
  /* Not using unicode character '⋯' because it has too much space in TeX font. */
  display = '⋅⋅⋅'
}

/**
 * A group of expressions separated by a character. Used e.g. for `$Tuple` and `$Enumeration`.
 *
 * @param items The list of expressions.
 * @param separator The separator character, optionally including a following space.
 *
 * @example `$Group(items = [a, b, c])`
 */
$Group(items: %Expr[], separator: %String = ', '): %Template {
  display = %for(
    param = items,
    dimension = 0,
    item = items,
    separator = separator
  )
}

/**
 * A group of expressions separated by a character and surrounded by parentheses.
 *
 * @param items The list of expressions.
 * @param separator The separator character, optionally including a following space.
 * @param style The parentheses style to use (see `$Parens`).
 *
 * @example `$Tuple(items = [a, b, c])`
 * @example `$Tuple(items = [a, b, c], style = '[]')`
 */
$Tuple(items: %Expr[], separator: %String = ', ', style: %String = '()'): %Template {
  display = $Parens(
    body = $Group(
      items = items,
      separator = separator
    ),
    style = style
  )
}

/**
 * A group of expressions arranged vertically and surrounded by parentheses. Used to display the objects and morphisms of individual categories in a readable fashion.
 * For vectors, use `$Vector` instead.
 *
 * @param items The list of expressions.
 * @param style The parentheses style to use (see `$Parens`).
 *
 * @example `$VerticalTuple(items = [a, b, c])`
 * @example `$VerticalTuple(items = [a, b, c], style = '[]')`
 */
$VerticalTuple(items: %Expr[], style: %String = '()'): %Template {
  display = $Style(
    body = $Parens(
      body = $Table(
        items = %for(items, 0, [[items]]),
        style = 'vertical-tuple'
      ),
      style = style
    ),
    styleClass = 'vertical-tuple'
  )
}

/**
 * A two-dimensional array of expressions, arranged as a matrix, surrounded by brackets.
 *
 * @param items A two-dimensional array of expressions, where each inner array represents a row.
 *
 * @example `$Matrix(items = [[a, b], [c, d]])`
 */
$Matrix(items: %Expr[,]): %Template {
  display = $Parens(
    body = $Table(
      items = items,
      style = 'matrix'
    ),
    style = '[]'
  )
}

/**
 * A vector, i.e. a single-column matrix.
 *
 * @param items The vector elements.
 *
 * @example `$Vector(items = [a, b])`
 */
$Vector(items: %Expr[]): %Template {
  display = $Matrix(
    items = %for(items, 0, [[items]])
  )
}

/**
 * The standard notation for function application. Often used to define functions as well.
 *
 * @param function The function.
 * @param arguments The list of function arguments.
 * @param style The parentheses style to use (see `$Parens`).
 * @param maxParenLevel Parentheses are displayed around `function` if its outer parentheses level is at most `maxParenLevel` (see `$OuterParens`). By default, parentheses are displayed if `function` contains an operator but not if it contains a subscript or superscript.
 *
 * @example `$Function(function = f, arguments = [x])`
 * @example `$Function(function = f, arguments = [a, b, c])`
 */
$Function(function: %Expr, arguments: %Expr[], style: %String = '()', maxParenLevel: %Int = 2): %Template {
  display = $OuterParens(
    body = [
      $InnerParens(
        body = function,
        maxLevel = maxParenLevel
      ),
      $Parens(
        body = $Group(
          items = arguments
        ),
        style = style
      )
    ],
    minLevel = 3
  )
}

/**
 * The standard notation for a constructor name.
 *
 * @param name The constructor name.
 *
 * @example `$ConstructorName(name = 'construct')`
 */
$ConstructorName(name: %String): %Template {
  display = $Style(
    body = name,
    styleClass = 'ctor'
  )
}

/**
 * The standard notation for a constructor with arguments.
 *
 * @param name The constructor name.
 * @param arguments The list of constructor arguments.
 *
 * @example `$Constructor(name = 'construct', arguments = [a, b, c])`
 */
$Constructor(name: %String, arguments: %Expr[]): %Template {
  display = $Function(
    function = $ConstructorName(
      name = name
    ),
    arguments = arguments
  )
}

/**
 * A binary operator (although it can be used with more than two operands if the operator is associative).
 *
 * @param symbol The operator symbol.
 * @param operands The list of operands. If more than two operands are given, the operator symbol is rendered between each pair of operands.
 * @param space The space to use between the operator symbol and its operands. The default is U+2009. For multiplication, use U+200A.
 * @param minParenLevel If this operator is used at a location with inner parentheses of level `minParenLevel` or greater (see `$InnerParens`), parentheses are added around the `$Operator` expression. By default, parentheses are added whenever this operator appears inside another operator, but not if it appears inside a relation.
 * @param maxParenLevel If an operand has outer parentheses of level `maxParenLevel` or less (see `$OuterParens`), parentheses are added around this operand. By default, parentheses are added around all operands that also contain operators, but not around operands with subscripts or superscripts.
 *
 * @example `$Operator(symbol = ∗, operands = [a, b])`
 */
$Operator(symbol: %Expr, operands: %Expr[], space: %String = ' ', minParenLevel: %Int = 0, maxParenLevel: %Int = 2): %Template {
  display = $OuterParens(
    body = %for(
      param = operands,
      dimension = 0,
      item = $InnerParens(
        body = operands,
        maxLevel = maxParenLevel,
        left = %not(%first),
        right = %not(%last)
      ),
      separator = [
        space,
        $InnerParens(
          body = symbol,
          maxLevel = 2
        ),
        space
      ]
    ),
    minLevel = minParenLevel
  )
}

$UnaryOperator(symbol: %Expr, operand: %Expr, space: %String = '', minParenLevel: %Int = 3, maxParenLevel?: %Int): %Template {
  display = $OuterParens(
    body = [$InnerParens(
      body = operand,
      maxLevel = maxParenLevel,
      right = %false
    ), space, symbol],
    minLevel = minParenLevel,
    left = %false
  )
}

$PrefixUnaryOperator(symbol: %Expr, operand: %Expr, space: %String = '', minParenLevel: %Int = 0, maxParenLevel: %Int = 2): %Template {
  display = $OuterParens(
    body = [symbol, space, $InnerParens(
      body = operand,
      maxLevel = maxParenLevel
    )],
    minLevel = minParenLevel
  )
}

$Relation(symbol: %Expr, operands: %Expr[], space: %String = ' ', parenLevel: %Int = -1): %Template {
  display = $Operator(
    symbol = symbol,
    operands = operands,
    space = space,
    minParenLevel = parenLevel,
    maxParenLevel = parenLevel
  )
}

$Verb(symbol: %Expr, operand: %Expr, parenLevel: %Int = -1): %Template {
  display = $UnaryOperator(
    symbol = symbol,
    operand = operand,
    space = ' ',
    minParenLevel = parenLevel,
    maxParenLevel = parenLevel
  )
}

$TextualRelation(symbol: %Expr, operands: %Expr[], parenLevel: %Int = -1): %Template {
  display = $Relation(
    symbol = symbol,
    operands = operands,
    space = ' ',
    parenLevel = parenLevel
  )
}

$BooleanOperator(symbol: %Expr, operands: %Expr[], space: %String = ' ', parenLevel: %Int = -2): %Template {
  display = $Operator(
    symbol = symbol,
    operands = operands,
    space = space,
    minParenLevel = parenLevel,
    maxParenLevel = parenLevel
  )
}

$UnaryBooleanOperator(symbol: %Expr, operand: %Expr, space: %String = ' ', parenLevel: %Int = -2): %Template {
  display = $PrefixUnaryOperator(
    symbol = symbol,
    operand = operand,
    space = space,
    minParenLevel = parenLevel,
    maxParenLevel = parenLevel
  )
}

$OverUnderOperator(symbol: %Expr, operand: %Expr, over?: %Expr, under?: %Expr, style?: %String, space: %String = ' ', minParenLevel: %Int = 0, maxParenLevel: %Int = 3): %Template {
  display = $OuterParens(
    body = $Style(
      body = [
        $OverUnder(
          body = symbol,
          over = over,
          under = under,
          style = style
        ),
        space,
        $InnerParens(
          body = operand,
          maxLevel = maxParenLevel
        )
      ],
      styleClass = 'nowrap'
    ),
    minLevel = minParenLevel
  )
}

$LargeOperator(symbol: %Expr, operand: %Expr, over?: %Expr, under?: %Expr, space: %String = ' ', minParenLevel: %Int = 0, maxParenLevel: %Int = 3): %Template {
  display = $OverUnderOperator(
    symbol = $Style(
      body = symbol,
      styleClass = 'largesym'
    ),
    operand = operand,
    over = over,
    under = under,
    space = space,
    minParenLevel = minParenLevel,
    maxParenLevel = maxParenLevel
  )
}

$FunctionOperator(symbol: %Expr = '→', operands: %Expr[], space: %String = ' ', minParenLevel: %Int = 0, maxParenLevel: %Int = 0): %Template {
  display = $Operator(
    symbol = symbol,
    operands = operands,
    space = space,
    minParenLevel = minParenLevel,
    maxParenLevel = maxParenLevel
  )
}

$Quantification(symbol: %Expr, parameters: %Expr, formula: %Expr, parenLevel: %Int = -2): %Template {
  display = $OuterParens(
    body = [symbol, ' ', parameters, ' : ', $InnerParens(
      body = formula,
      maxLevel = parenLevel,
      right = %false
    )],
    minLevel = parenLevel,
    left = %false
  )
}

$PlainQuantification(symbol: %Expr, parameters: %Expr, parenLevel: %Int = -2): %Template {
  display = $OuterParens(
    body = [symbol, ' ', parameters],
    minLevel = parenLevel,
    left = %false
  )
}

/**
 * A property of the form "`a` is `b`", where `b` is usually an adjective.
 * Use `$NounProperty` for the case where `b` is a noun.
 *
 * @param operand The operand of the property (`a` above).
 * @param property The property (`b` above).
 * @param article An article to be prepended to `b`. Used by `$NounProperty` which is defined as a special case of `$Property`.
 */
$Property(operand: %Expr, property: %Expr, article?: %String): %Template {
  display = $Verb(
    symbol = [%neg('is', 'is not'), %opt(article, [' ', article]), ' ', property],
    operand = operand
  )
}

$RelationalProperty(operands: %Expr[], property: %Expr, article?: %String, preposition: %String): %Template {
  display = $TextualRelation(
    symbol = [%neg('is', 'is not'), %opt(article, [' ', article]), ' ', property, ' ', preposition],
    operands = operands
  )
}

/**
 * A property of the form "`a` is a `b`", where `b` is a noun.
 *
 * @param operand The operand of the property (`a` above).
 * @param singular The singular form of the noun (`b` above).
 * @param plural The plural form of the noun.
 * @param article Either "a" or "an", depending on whether the noun starts with a vowel.
 */
$NounProperty(operand: %Expr, singular: %Expr, plural: %Expr, article: %String = 'a'): %Template {
  display = $Property(
    operand = operand,
    property = singular,
    article = article
  )
}

$NounRelation(operands: %Expr[], singular: %Expr, plural: %Expr, article: %String = 'a', preposition: %String = 'of'): %Template {
  display = $RelationalProperty(
    operands = operands,
    property = singular,
    article = article,
    preposition = preposition
  )
}

$Structure(operands: %Expr[], singular: %Expr, plural: %Expr, article: %String = 'a'): %Template {
  display = $Verb(
    symbol = [%neg('forms', 'does not form'), ' ', article, ' ', singular],
    operand = $Tuple(
      items = operands
    )
  )
}

$Feature(operand: %Expr, singular: %Expr, plural: %Expr, article: %String = 'a'): %Template {
  display = $Verb(
    symbol = [%neg('has', 'does not have'), ' ', article, ' ', singular],
    operand = operand
  )
}

$MultiProperty(operands: %Expr[], property: %Expr): %Template {
  display = $Verb(
    symbol = [%neg('are', 'are not'), ' ', property],
    operand = [
      %for(
        param = operands,
        dimension = 0,
        item = operands,
        separator = ' and '
      )
    ]
  )
}

$DependentWord(word: %Expr, argument: %Expr): %Template {
  display = [
    $InnerParens(
      body = argument,
      maxLevel = 2
    ),
    '-',
    word
  ]
}

$SubsetParameter(subset: %Expr, superset: %Expr): %Template {
  display = $Relation(
    symbol = '⊆',
    operands = [subset, superset],
    space = ' '
  )
}

$ElementParameter(element: %Expr, set: %Expr): %Template {
  display = $Relation(
    symbol = '∈',
    operands = [element, set],
    space = ' '
  )
}

$VariableDefinition(left: %Expr, right: %Expr): %Template {
  display = $Relation(
    symbol = [$DefinitionColon, '='],
    operands = [left, right],
    space = ' '
  )
}

$MultiEqualityRelation(operands: %Expr[]): %Template {
  display = $Relation(
    symbol = %neg('=', '≠'),
    operands = operands
  )
}

$EqualityRelation(left: %Expr, right: %Expr): %Template {
  display = $MultiEqualityRelation(
    operands = [left, right]
  )
}

$EqualityDefinition(left: %Expr, right: %Expr): %Template {
  display = $Relation(
    symbol = [$DefinitionColon, '='],
    operands = [left, right]
  )
}

$ConstructionDefinition(left: %Expr, right: %Expr): %Template {
  display = $Relation(
    symbol = [$DefinitionColon, '=', $DefinitionColon],
    operands = [left, right]
  )
}

$MultiEquivalenceRelation(operands: %Expr[]): %Template {
  display = $Relation(
    symbol = %neg('⇔', '⇎'),
    operands = operands,
    space = '  ',
    parenLevel = -3
  )
}

$EquivalenceRelation(left: %Expr, right: %Expr): %Template {
  display = $MultiEquivalenceRelation(
    operands = [left, right]
  )
}

$EquivalenceDefinition(left: %Expr, right: %Expr): %Template {
  display = $Relation(
    symbol = [$DefinitionColon, '⇔'],
    operands = [left, right],
    space = '  ',
    parenLevel = -3
  )
}

$ImplicationRelation(left: %Expr, right: %Expr): %Template {
  display = $Relation(
    symbol = %neg('⇒', '⇏'),
    operands = [left, right],
    space = '  ',
    parenLevel = -3
  )
}

$ElementRelation(element: %Expr, set: %Expr): %Template {
  display = $Relation(
    symbol = %neg('∈', '∉'),
    operands = [element, set]
  )
}

$SubsetRelation(subset: %Expr, superset: %Expr): %Template {
  display = $Relation(
    symbol = %neg('⊆', '⊈'),
    operands = [subset, superset]
  )
}

$EmbeddingDefinition(subset: %Expr, superset: %Expr): %Template {
  display = $Relation(
    symbol = ['⊆', $DefinitionColon],
    operands = [subset, superset]
  )
}

$FunctionPrefix(function: %Expr, body: %Expr, space: %String = ' ', minParenLevel: %Int = 0): %Template {
  display = $Operator(
    symbol = $DefinitionColon,
    operands = [function, body],
    space = space,
    minParenLevel = minParenLevel,
    maxParenLevel = -1
  )
}

$FunctionDefinition(function: %Expr, symbol: %Expr = '→', operands: %Expr[], space: %String = ' ', minParenLevel: %Int = 0, maxParenLevel: %Int = 0): %Template {
  display = $FunctionPrefix(
    function = function,
    body = $FunctionOperator(
      symbol = symbol,
      operands = operands,
      space = space,
      maxParenLevel = maxParenLevel
    ),
    space = space,
    minParenLevel = minParenLevel
  )
}

$Binding(variable: %Expr, value: %Expr): %Template {
  display = [variable, '↦', value]
}

$Set(body: %Expr): %Template {
  display = $Parens(
    body = body,
    style = '{}'
  )
}

$Enumeration(items: %Expr[]): %Template {
  display = $Set(
    body = $Group(
      items = items
    )
  )
}

$SetBuilder(element: %Expr, constraint: %Expr): %Template {
  display = $Set(
    body = [element, ' : ', constraint]
  )
}

$Construction(constructors: %Expr[,]): %Template {
  display = $Set(
    body = $Table(
      items = constructors,
      style = 'construction'
    )
  )
}

$Negation(operand: %Expr): %Template {
  display = $UnaryBooleanOperator(
    symbol = 'not',
    operand = operand
  )
}

$True: %Template {
  display = 'true'
}

$False: %Template {
  display = 'false'
}

$Conjunction(operands: %Expr[]): %Template {
  display = $BooleanOperator(
    symbol = 'and',
    operands = operands
  )
}

$Disjunction(operands: %Expr[]): %Template {
  display = $BooleanOperator(
    symbol = 'or',
    operands = operands
  )
}

$UniversalQuantification(parameters: %Expr, formula: %Expr): %Template {
  display = $Quantification(
    symbol = '∀',
    parameters = parameters,
    formula = formula
  )
}

$ExistentialQuantification(parameters: %Expr, formula: %Expr): %Template {
  display = $Quantification(
    symbol = %neg('∃', '∄'),
    parameters = parameters,
    formula = formula
  )
}

$PlainExistentialQuantification(parameters: %Expr): %Template {
  display = $PlainQuantification(
    symbol = %neg('∃', '∄'),
    parameters = parameters
  )
}

$UniqueExistentialQuantification(parameters: %Expr, formula: %Expr): %Template {
  display = $Quantification(
    symbol = '∃!',
    parameters = parameters,
    formula = formula
  )
}

$PlainUniqueExistentialQuantification(parameters: %Expr): %Template {
  display = $PlainQuantification(
    symbol = '∃!',
    parameters = parameters
  )
}

$SingleCase(case: %Expr[]): %Template {
  display = $OuterParens(
    body = $Table(
      items = [case],
      style = 'single-case'
    ),
    left = %false,
    right = %true
  )
}

$Cases(cases: %Expr[,]): %Template {
  display = $OuterParens(
    body = $Parens(
      body = $Table(
        items = cases,
        style = 'cases'
      ),
      style = '{'
    ),
    left = %false,
    right = %true
  )
}

$BinomialCoefficient(top: %Expr, bottom: %Expr): %Template {
  display = $Parens(
    body = $Table(
      items = [[top], [bottom]],
      style = 'binom'
    ),
    style = '()'
  )
}

$Segment(set: %Expr, symbol: %Expr, limit: %Expr): %Template {
  display = $SubSup(
    body = set,
    sub = $PrefixUnaryOperator(
      symbol = symbol,
      operand = limit
    )
  )
}

$DependentProofStep(result: %Expr, source?: %Expr): %Template {
  display = [
    %opt(
      source,
      $OverUnder(
        body = '⇒',
        over = source,
        style = 'shallow'
      ),
      '⇒'
    ),
    ' ',
    result
  ]
}

$SourceProofStep(result: %Expr, source: %Expr): %Template {
  display = [
    source,
    ' ⇒ ',
    result
  ]
}

$LambdaAbstraction(variable: %Expr, term: %Expr): %Template {
  display = $OuterParens(
    body = [
      'λ',
      $InnerParens(
        body = variable,
        maxLevel = 3
      ),
      '. ',
      $InnerParens(
        body = term,
        maxLevel = 1
      )
    ],
    minLevel = 2
  )
}

$LambdaApplication(function: %Expr, argument: %Expr): %Template {
  display = $OuterParens(
    body = [
      $InnerParens(
        body = function,
        maxLevel = 2
      ),
      ' ',
      $InnerParens(
        body = argument,
        maxLevel = 2
      )
    ],
    minLevel = 2
  )
}

$LambdaSubstitution(term: %Expr, variable: %Expr, replacement: %Expr): %Template {
  display = $Function(
    function = term,
    arguments = [$EqualityDefinition(
      left = variable,
      right = replacement
    )],
    style = '[]',
    maxParenLevel = 4
  )
}
